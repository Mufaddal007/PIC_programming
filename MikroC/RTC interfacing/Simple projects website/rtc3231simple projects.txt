
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
/**************************************************************************************
 
  Interfacing PIC16F887 microcontroller with DS3231 RTC.
  Time, date and chip temperature are displayed on 20x4 LCD.
  C Code for mikroC PRO for PIC compiler.
  Internal oscillator used @ 8MHz
  Configuration words: CONFIG1 = 0x2CD4
                       CONFIG2 = 0x0700
  This is a free software with NO WARRANTY.
  https://simple-circuit.com/
 
***************************************************************************************/
 
// LCD module connections
sbit LCD_RS at RD0_bit;
sbit LCD_EN at RD1_bit;
sbit LCD_D4 at RD2_bit;
sbit LCD_D5 at RD3_bit;
sbit LCD_D6 at RD4_bit;
sbit LCD_D7 at RD5_bit;
sbit LCD_RS_Direction at TRISD0_bit;
sbit LCD_EN_Direction at TRISD1_bit;
sbit LCD_D4_Direction at TRISD2_bit;
sbit LCD_D5_Direction at TRISD3_bit;
sbit LCD_D6_Direction at TRISD4_bit;
sbit LCD_D7_Direction at TRISD5_bit;
// end LCD module connections
 
#include <DS3231.c>  // include DS3231 RTC driver source file
 
int chip_temp;
// DS3231 library variable declaration
RTC_Time *mytime;
 
// function for printing time and date on LCD
void rtc_print()
{
  char txt[17];
  // print day of the week
  switch(mytime->dow)
  {
    case SUNDAY   :  LCD_Out(1, 5, " SUNDAY  ");  break;
    case MONDAY   :  LCD_Out(1, 5, " MONDAY  ");  break;
    case TUESDAY  :  LCD_Out(1, 5, " TUESDAY ");  break;
    case WEDNESDAY:  LCD_Out(1, 5, "WEDNESDAY");  break;
    case THURSDAY :  LCD_Out(1, 5, "THURSDAY ");  break;
    case FRIDAY   :  LCD_Out(1, 5, " FRIDAY  ");  break;
    default       :  LCD_Out(1, 5, "SATURDAY ");
  }
 
  // print time
  sprinti(txt, "TIME: %02u:%02u:%02u", (int)mytime->hours, (int)mytime->minutes, (int)mytime->seconds);
  LCD_Out(2, 1, txt);
  // print date
  sprinti(txt, "DATE: %02u-%02u-20%02u", (int)mytime->day, (int)mytime->month, (int)mytime->year);
  LCD_Out(3, 1, txt);
  
  // print chip temperature
  if (chip_temp < 0)  // if temperature is negative
    sprinti(txt, "TEMP:-%02u.%02u%cC", abs(chip_temp) / 100, abs(chip_temp) % 100, (int)223);
  else
    sprinti(txt, "TEMP: %02u.%02u%cC", chip_temp / 100, chip_temp % 100, (int)223);
  
  LCD_Out(4, 1, txt);
}
 
// main function
void main()
{
  OSCCON = 0x70;            // set internal oscillator to 8MHz
  delay_ms(1000);           // wait a second
  
  I2C1_Init(100000);        // initialize I2C communication
  Lcd_Init();               // initialize LCD module
  Lcd_Cmd(_LCD_CURSOR_OFF); // cursor off
  Lcd_Cmd(_LCD_CLEAR);      // clear LCD
 
  // read current time and date from the RTC chip
  mytime = RTC_Get();
  // print them
  rtc_print();
 
  delay_ms(1000);  // wait a second
 
  // set RTC time to 21:08:47 (hh:mm:ss) and date to 03-01-19 (dd-mm-yy)
  mytime->hours   = 21;
  mytime->minutes = 8;
  mytime->seconds = 47;
  mytime->dow     = THURSDAY;
  mytime->day     = 3;
  mytime->month   = JANUARY;
  mytime->year    = 19;
  // write time and date to the RTC chip
  RTC_Set(mytime);
 
  // enable SQW output with frequency of 1Hz
  IntSqw_Set(OUT_1Hz);
 
  while(1)
  {
    // read current time and date from the RTC chip
    mytime = RTC_Get();
    // read chip temperature
    chip_temp = Get_Temperature();
    // print all data
    rtc_print();
 
    delay_ms(200);  // wait 200 ms
 
  }
 
}
// end of code.
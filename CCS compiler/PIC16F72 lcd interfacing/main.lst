CCS PCM C Compiler, Version 5.015, 5967               06-Nov-20 07:44

               Filename:   C:\Users\YES\Desktop\Interfacing-LCD-with-PIC-Microcontroller-CCS-C\Interfacing LCD with PIC Microcontroller - CCS C\main.lst

               ROM used:   744 words (9%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           23 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   299
0003:  NOP
.................... //LCD Module Connections   
.................... #define LCD_RS_PIN      PIN_B1                                    
.................... #define LCD_RW_PIN      PIN_B2  
.................... #define LCD_ENABLE_PIN  PIN_B3  
.................... #define LCD_DATA4       PIN_B4                                     
.................... #define LCD_DATA5       PIN_B5                                     
.................... #define LCD_DATA6       PIN_B6                            
.................... #define LCD_DATA7       PIN_B7 
.................... //End LCD Module Connections 
....................  
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA C8,32
0005:  DATA 6C,36
0006:  DATA 6F,10
0007:  DATA 54,34
0008:  DATA 65,39
0009:  DATA E5,10
000A:  DATA 00,00
000B:  DATA CC,21
000C:  DATA 44,10
000D:  DATA 63,34
000E:  DATA E5,31
000F:  DATA 6B,10
0010:  DATA 00,01
0011:  DATA C3,37
0012:  DATA 75,37
0013:  DATA 74,10
0014:  DATA 3D,10
0015:  DATA 25,32
0016:  DATA 00,00
*
017C:  MOVF   0B,W
017D:  MOVWF  22
017E:  BCF    0B.7
017F:  BSF    03.5
0180:  BSF    03.6
0181:  BSF    0C.7
0182:  BSF    0C.0
0183:  NOP
0184:  NOP
0185:  BCF    03.5
0186:  BCF    03.6
0187:  BTFSC  22.7
0188:  BSF    0B.7
0189:  BSF    03.6
018A:  MOVF   0C,W
018B:  ANDLW  7F
018C:  BTFSC  03.2
018D:  GOTO   1D0
018E:  BCF    03.6
018F:  MOVWF  22
0190:  BSF    03.6
0191:  MOVF   0D,W
0192:  BCF    03.6
0193:  MOVWF  23
0194:  BSF    03.6
0195:  MOVF   0F,W
0196:  BCF    03.6
0197:  MOVWF  24
0198:  MOVF   22,W
0199:  MOVWF  28
019A:  CALL   150
019B:  MOVF   23,W
019C:  BSF    03.6
019D:  MOVWF  0D
019E:  BCF    03.6
019F:  MOVF   24,W
01A0:  BSF    03.6
01A1:  MOVWF  0F
01A2:  BCF    03.6
01A3:  MOVF   0B,W
01A4:  MOVWF  25
01A5:  BCF    0B.7
01A6:  BSF    03.5
01A7:  BSF    03.6
01A8:  BSF    0C.7
01A9:  BSF    0C.0
01AA:  NOP
01AB:  NOP
01AC:  BCF    03.5
01AD:  BCF    03.6
01AE:  BTFSC  25.7
01AF:  BSF    0B.7
01B0:  BSF    03.6
01B1:  RLF    0C,W
01B2:  RLF    0E,W
01B3:  ANDLW  7F
01B4:  BTFSC  03.2
01B5:  GOTO   1D0
01B6:  BCF    03.6
01B7:  MOVWF  22
01B8:  BSF    03.6
01B9:  MOVF   0D,W
01BA:  BCF    03.6
01BB:  MOVWF  23
01BC:  BSF    03.6
01BD:  MOVF   0F,W
01BE:  BCF    03.6
01BF:  MOVWF  24
01C0:  MOVF   22,W
01C1:  MOVWF  28
01C2:  CALL   150
01C3:  MOVF   23,W
01C4:  BSF    03.6
01C5:  MOVWF  0D
01C6:  BCF    03.6
01C7:  MOVF   24,W
01C8:  BSF    03.6
01C9:  MOVWF  0F
01CA:  INCF   0D,F
01CB:  BTFSC  03.2
01CC:  INCF   0F,F
01CD:  BCF    03.6
01CE:  GOTO   17C
01CF:  BSF    03.6
01D0:  BCF    03.6
01D1:  RETURN
01D2:  MOVF   0B,W
01D3:  MOVWF  23
01D4:  BCF    0B.7
01D5:  BSF    03.5
01D6:  BSF    03.6
01D7:  BSF    0C.7
01D8:  BSF    0C.0
01D9:  NOP
01DA:  NOP
01DB:  BCF    03.5
01DC:  BCF    03.6
01DD:  BTFSC  23.7
01DE:  BSF    0B.7
01DF:  BTFSC  03.0
01E0:  GOTO   209
01E1:  BSF    03.6
01E2:  MOVF   0C,W
01E3:  ANDLW  7F
01E4:  BCF    03.6
01E5:  MOVWF  23
01E6:  BSF    03.6
01E7:  MOVF   0D,W
01E8:  BCF    03.6
01E9:  MOVWF  24
01EA:  BSF    03.6
01EB:  MOVF   0F,W
01EC:  BCF    03.6
01ED:  MOVWF  25
01EE:  MOVF   23,W
01EF:  MOVWF  28
01F0:  CALL   150
01F1:  MOVF   24,W
01F2:  BSF    03.6
01F3:  MOVWF  0D
01F4:  BCF    03.6
01F5:  MOVF   25,W
01F6:  BSF    03.6
01F7:  MOVWF  0F
01F8:  BCF    03.6
01F9:  MOVF   0B,W
01FA:  MOVWF  26
01FB:  BCF    0B.7
01FC:  BSF    03.5
01FD:  BSF    03.6
01FE:  BSF    0C.7
01FF:  BSF    0C.0
0200:  NOP
0201:  NOP
0202:  BCF    03.5
0203:  BCF    03.6
0204:  BTFSC  26.7
0205:  BSF    0B.7
0206:  DECFSZ 22,F
0207:  GOTO   209
0208:  GOTO   228
0209:  BSF    03.6
020A:  RLF    0C,W
020B:  RLF    0E,W
020C:  ANDLW  7F
020D:  BCF    03.6
020E:  MOVWF  23
020F:  BSF    03.6
0210:  MOVF   0D,W
0211:  BCF    03.6
0212:  MOVWF  24
0213:  BSF    03.6
0214:  MOVF   0F,W
0215:  BCF    03.6
0216:  MOVWF  25
0217:  MOVF   23,W
0218:  MOVWF  28
0219:  CALL   150
021A:  MOVF   24,W
021B:  BSF    03.6
021C:  MOVWF  0D
021D:  BCF    03.6
021E:  MOVF   25,W
021F:  BSF    03.6
0220:  MOVWF  0F
0221:  INCF   0D,F
0222:  BTFSC  03.2
0223:  INCF   0F,F
0224:  BCF    03.0
0225:  BCF    03.6
0226:  DECFSZ 22,F
0227:  GOTO   1D2
0228:  BCF    0A.3
0229:  BCF    0A.4
022A:  GOTO   2D9 (RETURN)
022B:  MOVF   29,W
022C:  CLRF   78
022D:  SUBWF  28,W
022E:  BTFSC  03.0
022F:  GOTO   233
0230:  MOVF   28,W
0231:  MOVWF  77
0232:  GOTO   23F
0233:  CLRF   77
0234:  MOVLW  08
0235:  MOVWF  2A
0236:  RLF    28,F
0237:  RLF    77,F
0238:  MOVF   29,W
0239:  SUBWF  77,W
023A:  BTFSC  03.0
023B:  MOVWF  77
023C:  RLF    78,F
023D:  DECFSZ 2A,F
023E:  GOTO   236
023F:  RETURN
0240:  MOVLW  20
0241:  BTFSS  23.4
0242:  MOVLW  30
0243:  MOVWF  24
0244:  MOVF   22,W
0245:  MOVWF  77
0246:  BTFSS  22.7
0247:  GOTO   250
0248:  COMF   77,F
0249:  INCF   77,F
024A:  MOVF   77,W
024B:  MOVWF  22
024C:  MOVLW  2D
024D:  MOVWF  24
024E:  BSF    23.7
024F:  BSF    23.0
0250:  MOVF   22,W
0251:  MOVWF  28
0252:  MOVLW  64
0253:  MOVWF  29
0254:  CALL   22B
0255:  MOVF   77,W
0256:  MOVWF  22
0257:  MOVLW  30
0258:  ADDWF  78,W
0259:  MOVWF  25
025A:  MOVF   22,W
025B:  MOVWF  28
025C:  MOVLW  0A
025D:  MOVWF  29
025E:  CALL   22B
025F:  MOVLW  30
0260:  ADDWF  77,W
0261:  MOVWF  27
0262:  MOVLW  30
0263:  ADDWF  78,W
0264:  MOVWF  26
0265:  MOVF   24,W
0266:  MOVWF  77
0267:  MOVLW  30
0268:  SUBWF  25,W
0269:  BTFSC  03.2
026A:  GOTO   26F
026B:  BSF    23.1
026C:  BTFSC  23.7
026D:  BSF    23.2
026E:  GOTO   283
026F:  MOVF   24,W
0270:  MOVWF  25
0271:  MOVLW  20
0272:  MOVWF  24
0273:  MOVLW  30
0274:  SUBWF  26,W
0275:  BTFSC  03.2
0276:  GOTO   27B
0277:  BSF    23.0
0278:  BTFSC  23.7
0279:  BSF    23.1
027A:  GOTO   283
027B:  BTFSS  03.2
027C:  BSF    23.0
027D:  BTFSS  03.2
027E:  GOTO   283
027F:  MOVF   25,W
0280:  MOVWF  26
0281:  MOVLW  20
0282:  MOVWF  25
0283:  BTFSC  23.2
0284:  GOTO   28A
0285:  BTFSC  23.1
0286:  GOTO   28D
0287:  BTFSC  23.0
0288:  GOTO   290
0289:  GOTO   293
028A:  MOVF   24,W
028B:  MOVWF  28
028C:  CALL   150
028D:  MOVF   25,W
028E:  MOVWF  28
028F:  CALL   150
0290:  MOVF   26,W
0291:  MOVWF  28
0292:  CALL   150
0293:  MOVF   27,W
0294:  MOVWF  28
0295:  CALL   150
0296:  BCF    0A.3
0297:  BCF    0A.4
0298:  GOTO   2DE (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
.................... #use delay(crystal=8000000) 
*
0017:  MOVLW  29
0018:  MOVWF  04
0019:  BCF    03.7
001A:  MOVF   00,W
001B:  BTFSC  03.2
001C:  GOTO   02A
001D:  MOVLW  02
001E:  MOVWF  78
001F:  CLRF   77
0020:  DECFSZ 77,F
0021:  GOTO   020
0022:  DECFSZ 78,F
0023:  GOTO   01F
0024:  MOVLW  97
0025:  MOVWF  77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  DECFSZ 00,F
0029:  GOTO   01D
002A:  RETURN
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0090:  BSF    06.4
....................    output_float(LCD_DATA5); 
0091:  BSF    06.5
....................    output_float(LCD_DATA6); 
0092:  BSF    06.6
....................    output_float(LCD_DATA7); 
0093:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0094:  BCF    03.5
0095:  BSF    06.2
0096:  BSF    03.5
0097:  BCF    06.2
....................    delay_cycles(1); 
0098:  NOP
....................    lcd_output_enable(1); 
0099:  BCF    03.5
009A:  BSF    06.3
009B:  BSF    03.5
009C:  BCF    06.3
....................    delay_cycles(1); 
009D:  NOP
....................    high = lcd_read_nibble(); 
009E:  BCF    03.5
009F:  CALL   057
00A0:  MOVF   78,W
00A1:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
00A2:  BCF    06.3
00A3:  BSF    03.5
00A4:  BCF    06.3
....................    delay_cycles(1); 
00A5:  NOP
....................    lcd_output_enable(1); 
00A6:  BCF    03.5
00A7:  BSF    06.3
00A8:  BSF    03.5
00A9:  BCF    06.3
....................    delay_us(1); 
00AA:  GOTO   0AB
....................    low = lcd_read_nibble(); 
00AB:  BCF    03.5
00AC:  CALL   057
00AD:  MOVF   78,W
00AE:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
00AF:  BCF    06.3
00B0:  BSF    03.5
00B1:  BCF    06.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B2:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00B3:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00B4:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00B5:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B6:  BCF    03.5
00B7:  SWAPF  30,W
00B8:  MOVWF  77
00B9:  MOVLW  F0
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  2F,W
00BD:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0057:  CLRF   31
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0058:  BSF    03.5
0059:  BSF    06.4
005A:  MOVLW  00
005B:  BCF    03.5
005C:  BTFSC  06.4
005D:  MOVLW  01
005E:  IORWF  31,F
....................    n |= input(LCD_DATA5) << 1; 
005F:  BSF    03.5
0060:  BSF    06.5
0061:  MOVLW  00
0062:  BCF    03.5
0063:  BTFSC  06.5
0064:  MOVLW  01
0065:  MOVWF  77
0066:  BCF    03.0
0067:  RLF    77,F
0068:  MOVF   77,W
0069:  IORWF  31,F
....................    n |= input(LCD_DATA6) << 2; 
006A:  BSF    03.5
006B:  BSF    06.6
006C:  MOVLW  00
006D:  BCF    03.5
006E:  BTFSC  06.6
006F:  MOVLW  01
0070:  MOVWF  77
0071:  RLF    77,F
0072:  RLF    77,F
0073:  MOVLW  FC
0074:  ANDWF  77,F
0075:  MOVF   77,W
0076:  IORWF  31,F
....................    n |= input(LCD_DATA7) << 3; 
0077:  BSF    03.5
0078:  BSF    06.7
0079:  MOVLW  00
007A:  BCF    03.5
007B:  BTFSC  06.7
007C:  MOVLW  01
007D:  MOVWF  77
007E:  RLF    77,F
007F:  RLF    77,F
0080:  RLF    77,F
0081:  MOVLW  F8
0082:  ANDWF  77,F
0083:  MOVF   77,W
0084:  IORWF  31,F
....................     
....................    return(n); 
0085:  MOVF   31,W
0086:  MOVWF  78
....................   #else 
0087:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002B:  BTFSC  30.0
002C:  GOTO   02F
002D:  BCF    06.4
002E:  GOTO   030
002F:  BSF    06.4
0030:  BSF    03.5
0031:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0032:  BCF    03.5
0033:  BTFSC  30.1
0034:  GOTO   037
0035:  BCF    06.5
0036:  GOTO   038
0037:  BSF    06.5
0038:  BSF    03.5
0039:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003A:  BCF    03.5
003B:  BTFSC  30.2
003C:  GOTO   03F
003D:  BCF    06.6
003E:  GOTO   040
003F:  BSF    06.6
0040:  BSF    03.5
0041:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0042:  BCF    03.5
0043:  BTFSC  30.3
0044:  GOTO   047
0045:  BCF    06.7
0046:  GOTO   048
0047:  BSF    06.7
0048:  BSF    03.5
0049:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004A:  NOP
....................    lcd_output_enable(1); 
004B:  BCF    03.5
004C:  BSF    06.3
004D:  BSF    03.5
004E:  BCF    06.3
....................    delay_us(2); 
004F:  GOTO   050
0050:  GOTO   051
....................    lcd_output_enable(0); 
0051:  BCF    03.5
0052:  BCF    06.3
0053:  BSF    03.5
0054:  BCF    06.3
0055:  BCF    03.5
0056:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0088:  BSF    03.5
0089:  BCF    06.3
....................    lcd_rs_tris(); 
008A:  BCF    06.1
....................    lcd_rw_tris(); 
008B:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008C:  BCF    03.5
008D:  BCF    06.1
008E:  BSF    03.5
008F:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00BE:  MOVF   78,W
00BF:  MOVWF  2F
00C0:  BTFSS  2F.7
00C1:  GOTO   0C4
00C2:  BSF    03.5
00C3:  GOTO   090
....................    lcd_output_rs(address); 
00C4:  MOVF   2D,F
00C5:  BTFSS  03.2
00C6:  GOTO   0C9
00C7:  BCF    06.1
00C8:  GOTO   0CA
00C9:  BSF    06.1
00CA:  BSF    03.5
00CB:  BCF    06.1
....................    delay_cycles(1); 
00CC:  NOP
....................    lcd_output_rw(0); 
00CD:  BCF    03.5
00CE:  BCF    06.2
00CF:  BSF    03.5
00D0:  BCF    06.2
....................    delay_cycles(1); 
00D1:  NOP
....................    lcd_output_enable(0); 
00D2:  BCF    03.5
00D3:  BCF    06.3
00D4:  BSF    03.5
00D5:  BCF    06.3
....................    lcd_send_nibble(n >> 4); 
00D6:  BCF    03.5
00D7:  SWAPF  2E,W
00D8:  MOVWF  2F
00D9:  MOVLW  0F
00DA:  ANDWF  2F,F
00DB:  MOVF   2F,W
00DC:  MOVWF  30
00DD:  CALL   02B
....................    lcd_send_nibble(n & 0xf); 
00DE:  MOVF   2E,W
00DF:  ANDLW  0F
00E0:  MOVWF  2F
00E1:  MOVWF  30
00E2:  CALL   02B
00E3:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00E4:  MOVLW  28
00E5:  MOVWF  23
00E6:  MOVLW  0C
00E7:  MOVWF  24
00E8:  MOVLW  01
00E9:  MOVWF  25
00EA:  MOVLW  06
00EB:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00EC:  BCF    06.3
00ED:  BSF    03.5
00EE:  BCF    06.3
....................    lcd_output_rs(0); 
00EF:  BCF    03.5
00F0:  BCF    06.1
00F1:  BSF    03.5
00F2:  BCF    06.1
....................    lcd_output_rw(0); 
00F3:  BCF    03.5
00F4:  BCF    06.2
00F5:  BSF    03.5
00F6:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F7:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00F8:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00F9:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00FA:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00FB:  BCF    06.3
....................    lcd_rs_tris(); 
00FC:  BCF    06.1
....................    lcd_rw_tris(); 
00FD:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00FE:  MOVLW  0F
00FF:  BCF    03.5
0100:  MOVWF  29
0101:  CALL   017
....................    for(i=1;i<=3;++i) 
0102:  MOVLW  01
0103:  MOVWF  22
0104:  MOVF   22,W
0105:  SUBLW  03
0106:  BTFSS  03.0
0107:  GOTO   110
....................    { 
....................        lcd_send_nibble(3); 
0108:  MOVLW  03
0109:  MOVWF  30
010A:  CALL   02B
....................        delay_ms(5); 
010B:  MOVLW  05
010C:  MOVWF  29
010D:  CALL   017
010E:  INCF   22,F
010F:  GOTO   104
....................    } 
....................     
....................    lcd_send_nibble(2); 
0110:  MOVLW  02
0111:  MOVWF  30
0112:  CALL   02B
....................    delay_ms(5); 
0113:  MOVLW  05
0114:  MOVWF  29
0115:  CALL   017
....................    for(i=0;i<=3;++i) 
0116:  CLRF   22
0117:  MOVF   22,W
0118:  SUBLW  03
0119:  BTFSS  03.0
011A:  GOTO   127
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
011B:  MOVLW  23
011C:  ADDWF  22,W
011D:  MOVWF  04
011E:  BCF    03.7
011F:  MOVF   00,W
0120:  MOVWF  27
0121:  CLRF   2D
0122:  MOVF   27,W
0123:  MOVWF  2E
0124:  CALL   088
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0125:  INCF   22,F
0126:  GOTO   117
0127:  BCF    0A.3
0128:  BCF    0A.4
0129:  GOTO   2A7 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
013E:  DECFSZ 2A,W
013F:  GOTO   141
0140:  GOTO   144
....................       address=LCD_LINE_TWO; 
0141:  MOVLW  40
0142:  MOVWF  2B
0143:  GOTO   145
....................    else 
....................       address=0; 
0144:  CLRF   2B
....................       
....................    address+=x-1; 
0145:  MOVLW  01
0146:  SUBWF  29,W
0147:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
0148:  MOVF   2B,W
0149:  IORLW  80
014A:  MOVWF  2C
014B:  CLRF   2D
014C:  MOVF   2C,W
014D:  MOVWF  2E
014E:  CALL   088
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
014F:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0150:  MOVF   28,W
0151:  XORLW  07
0152:  BTFSC  03.2
0153:  GOTO   15E
0154:  XORLW  0B
0155:  BTFSC  03.2
0156:  GOTO   163
0157:  XORLW  06
0158:  BTFSC  03.2
0159:  GOTO   16B
015A:  XORLW  02
015B:  BTFSC  03.2
015C:  GOTO   171
015D:  GOTO   176
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
015E:  MOVLW  01
015F:  MOVWF  29
0160:  MOVWF  2A
0161:  CALL   13E
0162:  GOTO   17B
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0163:  CLRF   2D
0164:  MOVLW  01
0165:  MOVWF  2E
0166:  CALL   088
....................                      delay_ms(2); 
0167:  MOVLW  02
0168:  MOVWF  29
0169:  CALL   017
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
016A:  GOTO   17B
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
016B:  MOVLW  01
016C:  MOVWF  29
016D:  MOVLW  02
016E:  MOVWF  2A
016F:  CALL   13E
0170:  GOTO   17B
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0171:  CLRF   2D
0172:  MOVLW  10
0173:  MOVWF  2E
0174:  CALL   088
0175:  GOTO   17B
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0176:  MOVLW  01
0177:  MOVWF  2D
0178:  MOVF   28,W
0179:  MOVWF  2E
017A:  CALL   088
....................      #endif 
....................    } 
017B:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #use delay (clock=14745600) 
*
012A:  MOVLW  23
012B:  MOVWF  04
012C:  BCF    03.7
012D:  MOVF   00,W
012E:  BTFSC  03.2
012F:  GOTO   13D
0130:  MOVLW  04
0131:  MOVWF  78
0132:  CLRF   77
0133:  DECFSZ 77,F
0134:  GOTO   133
0135:  DECFSZ 78,F
0136:  GOTO   132
0137:  MOVLW  C7
0138:  MOVWF  77
0139:  DECFSZ 77,F
013A:  GOTO   139
013B:  DECFSZ 00,F
013C:  GOTO   130
013D:  RETURN
....................  
.................... void main() 
*
0299:  MOVF   03,W
029A:  ANDLW  1F
029B:  MOVWF  03
029C:  BSF    03.5
029D:  BSF    1F.0
029E:  BSF    1F.1
029F:  BSF    1F.2
02A0:  BCF    1F.3
02A1:  MOVLW  07
02A2:  MOVWF  1C
02A3:  BCF    03.7
02A4:  BCF    03.5
02A5:  CLRF   21
.................... { 
....................    int i=0; 
....................     
....................    lcd_init(); 
02A6:  GOTO   0E4
....................    Delay_ms(100); 
02A7:  MOVLW  64
02A8:  MOVWF  23
02A9:  CALL   12A
....................    
....................    while(TRUE) 
....................    { 
....................      lcd_putc('\f'); //Clear Display 
02AA:  MOVLW  0C
02AB:  MOVWF  28
02AC:  CALL   150
....................      lcd_putc("Hello There!"); 
02AD:  MOVLW  04
02AE:  BSF    03.6
02AF:  MOVWF  0D
02B0:  MOVLW  00
02B1:  MOVWF  0F
02B2:  BCF    03.6
02B3:  CALL   17C
....................      Delay_ms(2000); 
02B4:  MOVLW  08
02B5:  MOVWF  22
02B6:  MOVLW  FA
02B7:  MOVWF  23
02B8:  CALL   12A
02B9:  DECFSZ 22,F
02BA:  GOTO   2B6
....................      lcd_putc('\f'); //Clear Display 
02BB:  MOVLW  0C
02BC:  MOVWF  28
02BD:  CALL   150
....................      lcd_putc("LCD check "); 
02BE:  MOVLW  0B
02BF:  BSF    03.6
02C0:  MOVWF  0D
02C1:  MOVLW  00
02C2:  MOVWF  0F
02C3:  BCF    03.6
02C4:  CALL   17C
....................      
....................     
....................      Delay_ms(2000); 
02C5:  MOVLW  08
02C6:  MOVWF  22
02C7:  MOVLW  FA
02C8:  MOVWF  23
02C9:  CALL   12A
02CA:  DECFSZ 22,F
02CB:  GOTO   2C7
....................      lcd_putc('\f'); 
02CC:  MOVLW  0C
02CD:  MOVWF  28
02CE:  CALL   150
....................      printf(lcd_putc,"Count = %d", i); 
02CF:  MOVLW  11
02D0:  BSF    03.6
02D1:  MOVWF  0D
02D2:  MOVLW  00
02D3:  MOVWF  0F
02D4:  BCF    03.0
02D5:  MOVLW  08
02D6:  BCF    03.6
02D7:  MOVWF  22
02D8:  GOTO   1D2
02D9:  MOVF   21,W
02DA:  MOVWF  22
02DB:  MOVLW  18
02DC:  MOVWF  23
02DD:  GOTO   240
....................      Delay_ms(2000); 
02DE:  MOVLW  08
02DF:  MOVWF  22
02E0:  MOVLW  FA
02E1:  MOVWF  23
02E2:  CALL   12A
02E3:  DECFSZ 22,F
02E4:  GOTO   2E0
....................      i++; 
02E5:  INCF   21,F
02E6:  GOTO   2AA
....................    } 
.................... } 
02E7:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

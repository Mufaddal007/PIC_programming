D G "LCD_LINE_LENGTH" 2 187 "20"
D G "__PCM__" 0 143 ""5.015""
D G "__DEVICE__" 0 143 "72"
D G "__DATE__" 0 143 ""06-Nov-20""
D G "__TIME__" 0 143 ""13:43:58"" "* Interfacing PIC16F84A microcontroller with DS3231 RTCC."
C G "" 0 1 1 "*"
C G "" 0 1 1 "*"
D G "LCD_RS_PIN" 0 9 "PIN_B0"
D G "LCD_RW_PIN" 0 10 "PIN_B1"
D G "LCD_ENABLE_PIN" 0 11 "PIN_B2"
D G "LCD_DATA4" 0 12 "PIN_B3"
D G "LCD_DATA5" 0 13 "PIN_B4"
D G "LCD_DATA6" 0 14 "PIN_B5"
D G "LCD_DATA7" 0 15 "PIN_B6"
c L "set_tris_a" 1 1 6 "FUNCTION"
v L "value" 1 35 "int8" `54 
f B "set_tris_a" 1 35 "void(int8 value)" `53 
v L "value" 1 36 "int8" `56 
f B "set_tris_b" 1 36 "void(int8 value)" `55 
v L "value" 1 37 "int8" `58 
f B "set_tris_c" 1 37 "void(int8 value)" `57 
f B "get_tris_a" 1 38 "int8()" `59 
f B "get_tris_b" 1 39 "int8()" `60 
f B "get_tris_c" 1 40 "int8()" `61 
v L "value" 1 41 "int8" `63 
f B "output_a" 1 41 "void(int8 value)" `62 
v L "value" 1 42 "int8" `65 
f B "output_b" 1 42 "void(int8 value)" `64 
v L "value" 1 43 "int8" `67 
f B "output_c" 1 43 "void(int8 value)" `66 
f B "input_a" 1 44 "int8()" `68 
f B "input_b" 1 45 "int8()" `69 
f B "input_c" 1 46 "int8()" `70 
f B "input_change_a" 1 47 "int8()" `71 
f B "input_change_b" 1 48 "int8()" `72 
f B "input_change_c" 1 49 "int8()" `73 
v L "pin" 1 50 "int16" `75 
f B "input" 1 50 "int8(int16 pin)" `74 
v L "pin" 1 51 "int16" `77 
f B "input_state" 1 51 "int8(int16 pin)" `76 
v L "pin" 1 52 "int16" `79 
f B "output_low" 1 52 "void(int16 pin)" `78 
v L "pin" 1 53 "int16" `81 
f B "output_high" 1 53 "void(int16 pin)" `80 
v L "pin" 1 54 "int16" `83 
f B "output_toggle" 1 54 "void(int16 pin)" `82 
v L "pin" 1 55 "int16" `85 
v L "level" 1 55 "int8" `86 
f B "output_bit" 1 55 "void(int16 pin,int8 level)" `84 
v L "pin" 1 56 "int16" `88 
f B "output_float" 1 56 "void(int16 pin)" `87 
v L "pin" 1 57 "int16" `90 
f B "output_drive" 1 57 "void(int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 61 "40"
d G "PIN_A1" 1 62 "41"
d G "PIN_A2" 1 63 "42"
d G "PIN_A3" 1 64 "43"
d G "PIN_A4" 1 65 "44"
d G "PIN_A5" 1 66 "45"
d G "PIN_B0" 1 68 "48"
d G "PIN_B1" 1 69 "49"
d G "PIN_B2" 1 70 "50"
d G "PIN_B3" 1 71 "51"
d G "PIN_B4" 1 72 "52"
d G "PIN_B5" 1 73 "53"
d G "PIN_B6" 1 74 "54"
d G "PIN_B7" 1 75 "55"
d G "PIN_C0" 1 77 "56"
d G "PIN_C1" 1 78 "57"
d G "PIN_C2" 1 79 "58"
d G "PIN_C3" 1 80 "59"
d G "PIN_C4" 1 81 "60"
d G "PIN_C5" 1 82 "61"
d G "PIN_C6" 1 83 "62"
d G "PIN_C7" 1 84 "63"
d G "FALSE" 1 87 "0"
d G "TRUE" 1 88 "1"
d G "BYTE" 1 90 "int8"
d G "BOOLEAN" 1 91 "int1"
d G "getc" 1 93 "getch"
d G "fgetc" 1 94 "getch"
d G "getchar" 1 95 "getch"
d G "putc" 1 96 "putchar"
d G "fputc" 1 97 "putchar"
d G "fgets" 1 98 "gets"
d G "fputs" 1 99 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 104 "int8()" `91 
f B "reset_cpu" 1 105 "void()" `92 
f B "sleep" 1 106 "void()" `93  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 108 "3"
d G "WDT_TIMEOUT" 1 109 "11"
d G "MCLR_FROM_SLEEP" 1 110 "19"
d G "MCLR_FROM_RUN" 1 111 "27"
d G "NORMAL_POWER_UP" 1 112 "25"
d G "BROWNOUT_RESTART" 1 113 "26"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 120 "int8" `95 
f B "setup_timer_0" 1 120 "void(int8 mode)" `94 
v L "value" 1 121 "int8" `97 
f B "set_timer0" 1 121 "void(int8 value)" `96 
f B "get_timer0" 1 122 "int8()" `98 
v L "mode" 1 123 "int8" `100 
v L "prescaler" 1 123 "int8" `101 
f B "setup_counters" 1 123 "void(int8 mode,int8 prescaler)" `99 
v L "value" 1 124 "int8" `103 
f B "set_rtcc" 1 124 "void(int8 value)" `102 
f B "get_rtcc" 1 125 "int8()" `104  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 127 "0"
d G "T0_EXT_L_TO_H" 1 128 "32"
d G "T0_EXT_H_TO_L" 1 129 "48"
d G "T0_DIV_1" 1 131 "8"
d G "T0_DIV_2" 1 132 "0"
d G "T0_DIV_4" 1 133 "1"
d G "T0_DIV_8" 1 134 "2"
d G "T0_DIV_16" 1 135 "3"
d G "T0_DIV_32" 1 136 "4"
d G "T0_DIV_64" 1 137 "5"
d G "T0_DIV_128" 1 138 "6"
d G "T0_DIV_256" 1 139 "7"
d G "T0_8_BIT" 1 142 "0"
d G "RTCC_INTERNAL" 1 144 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 145 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 146 "48"
d G "RTCC_DIV_1" 1 147 "8"
d G "RTCC_DIV_2" 1 148 "0"
d G "RTCC_DIV_4" 1 149 "1"
d G "RTCC_DIV_8" 1 150 "2"
d G "RTCC_DIV_16" 1 151 "3"
d G "RTCC_DIV_32" 1 152 "4"
d G "RTCC_DIV_64" 1 153 "5"
d G "RTCC_DIV_128" 1 154 "6"
d G "RTCC_DIV_256" 1 155 "7"
d G "RTCC_8_BIT" 1 156 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
v L "mode" 1 167 "int16" `106 
f B "setup_wdt" 1 167 "void(int16 mode)" `105 
f B "restart_wdt" 1 168 "void()" `107  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 171 "8"
d G "WDT_36MS" 1 172 "9"
d G "WDT_72MS" 1 173 "10"
d G "WDT_144MS" 1 174 "11"
d G "WDT_288MS" 1 175 "12"
d G "WDT_576MS" 1 176 "13"
d G "WDT_1152MS" 1 177 "14"
d G "WDT_2304MS" 1 178 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 184 "int16" `109 
f B "setup_timer_1" 1 184 "void(int16 mode)" `108 
f B "get_timer1" 1 185 "int16()" `110 
v L "value" 1 186 "int16" `112 
f B "set_timer1" 1 186 "void(int16 value)" `111  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 189 "0"
d G "T1_INTERNAL" 1 190 "0x85"
d G "T1_EXTERNAL" 1 191 "0x87"
d G "T1_EXTERNAL_SYNC" 1 192 "0x83"
d G "T1_CLK_OUT" 1 194 "8"
d G "T1_DIV_BY_1" 1 196 "0"
d G "T1_DIV_BY_2" 1 197 "0x10"
d G "T1_DIV_BY_4" 1 198 "0x20"
d G "T1_DIV_BY_8" 1 199 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 204 "int8" `114 
v L "period" 1 204 "int8" `115 
v L "postscale" 1 204 "int8" `116 
f B "setup_timer_2" 1 204 "void(int8 mode,int8 period,int8 postscale)" `113 
f B "get_timer2" 1 205 "int8()" `117 
v L "value" 1 206 "int8" `119 
f B "set_timer2" 1 206 "void(int8 value)" `118  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 208 "0"
d G "T2_DIV_BY_1" 1 209 "4"
d G "T2_DIV_BY_4" 1 210 "5"
d G "T2_DIV_BY_16" 1 211 "6"
c L "set_timer2" 1 1 4 "FUNCTION"
v L "mode" 1 217 "int32" `121 
f B "setup_ccp1" 1 217 "void(int32 mode)" `120 
v L "mode" 1 218 "int32" `123 
v L "pwm" 1 218 "int8" `124 
f G "setup_ccp1" 1 218 "void(int32 mode,int8 pwm)" `122 
v L "value" 1 219 "int16" `126 
f B "set_pwm1_duty" 1 219 "void(int16 value)" `125  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 221 "0"
d G "CCP_CAPTURE_FE" 1 222 "4"
d G "CCP_CAPTURE_RE" 1 223 "5"
d G "CCP_CAPTURE_DIV_4" 1 224 "6"
d G "CCP_CAPTURE_DIV_16" 1 225 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 226 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 227 "9"
d G "CCP_COMPARE_INT" 1 228 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 229 "0xB"
d G "CCP_PWM" 1 230 "0xC"
d G "CCP_PWM_PLUS_1" 1 231 "0x1c"
d G "CCP_PWM_PLUS_2" 1 232 "0x2c"
d G "CCP_PWM_PLUS_3" 1 233 "0x3c"
c L "set_pwm1_duty" 1 1 3 "FUNCTION"
v L "mode" 1 240 "int32" `131 
f B "setup_spi" 1 240 "void(int32 mode)" `130 
v L "value" 1 241 "int8" `133 
f B "spi_write" 1 241 "void(int8 value)" `132 
f B "spi_read" 1 242 "int8()" `134 
v L "value" 1 243 "int8" `136 
f G "spi_read" 1 243 "int8(int8 value)" `135 
f B "spi_data_in" 1 244 "int8()" `137  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 246 "0x00"
d G "SPI_MASTER" 1 247 "0x20"
d G "SPI_SLAVE" 1 248 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 249 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 250 "0x00"
d G "SPI_CLK_DIV_4" 1 251 "0x00"
d G "SPI_CLK_DIV_16" 1 252 "0x01"
d G "SPI_CLK_DIV_64" 1 253 "0x02"
d G "SPI_CLK_T2" 1 254 "0x03"
d G "SPI_SS_DISABLED" 1 255 "0x01"
d G "SPI_XMIT_L_TO_H" 1 257 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 258 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 260 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 261 "0x8000"
d G "SPI_L_TO_H" 1 264 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 265 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 1 1 4 "FUNCTION"
v L "mode" 1 273 "int16" `139 
f B "setup_adc" 1 273 "void(int16 mode)" `138 
f B "read_adc" 1 274 "int8()" `140 
v L "mode" 1 275 "int8" `142 
f B "read_adc" 1 275 "int8(int8 mode)" `141 
f B "read_adc" 1 276 "int16()" `143 
v L "mode" 1 277 "int8" `145 
f B "read_adc" 1 277 "int16(int8 mode)" `144 
f B "adc_done" 1 278 "int8()" `146  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 280 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 281 "0x100"
d G "ADC_CLOCK_DIV_8" 1 282 "0x40"
d G "ADC_CLOCK_DIV_32" 1 283 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 284 "0xc0" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
v L "setting" 1 287 "int8" `148 
f B "setup_adc_ports" 1 287 "void(int8 setting)" `147 
v L "channel" 1 288 "int8" `150 
f B "set_adc_channel" 1 288 "void(int8 channel)" `149  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 290 "7" "None"
d G "ALL_ANALOG" 1 291 "0" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 292 "1" "A0 A1 A2 A5 VRefh=A3"
d G "AN0_AN1_AN3" 1 293 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 294 "5" "A0 A1 VRefh=A3"
d G "ANALOG_RA3_REF" 1 295 "1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 296 "4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 297 "5" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 300 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 301 "1"
d G "ADC_READ_ONLY" 1 302 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 308 "sint8" `152 
f B "abs" 1 308 "sint8(sint8 x)" `151 
v L "x" 1 309 "sint16" `154 
f B "abs" 1 309 "sint16(sint16 x)" `153 
v L "x" 1 310 "sint32" `156 
f G "abs" 1 310 "sint32(sint32 x)" `155 
v L "x" 1 311 "float" `158 
f B "abs" 1 311 "float(float x)" `157 
v L "??65535" 1 312 "int8" `160 
v L "??65535" 1 312 "int8" `161 
f B "_mul" 1 312 "int16(int8 ,int8 )" `159 
v L "??65535" 1 313 "sint8" `160 
v L "??65535" 1 313 "sint8" `164 
f G "_mul" 1 313 "sint16(sint8 ,sint8 )" `162 
v L "??65535" 1 314 "int16" `160 
v L "??65535" 1 314 "int16" `167 
f B "_mul" 1 314 "int32(int16 ,int16 )" `165 
v L "??65535" 1 315 "sint16" `160 
v L "??65535" 1 315 "sint16" `170 
f G "_mul" 1 315 "sint32(sint16 ,sint16 )" `168  "Memory Manipulation Prototypes:"
v L "bank" 1 318 "int8" `172 
v L "offset" 1 318 "int8" `173 
f B "read_bank" 1 318 "int8(int8 bank,int8 offset)" `171 
v L "bank" 1 319 "int8" `175 
v L "offset" 1 319 "int8" `176 
v L "value" 1 319 "int8" `177 
f B "write_bank" 1 319 "void(int8 bank,int8 offset,int8 value)" `174 
v L "dest" 1 320 "*int8" `179 
v L "src" 1 320 "*int8" `180 
f B "strcpy" 1 320 "void(*int8 dest,*int8 src)" `178 
v L "dest" 1 321 "*int8" `182 
v L "src" 1 321 "*int8" `183 
f B "strcopy" 1 321 "void(*int8 dest,*int8 src)" `181 
v L "destination" 1 322 "*int8" `185 
v L "value" 1 322 "int8" `186 
v L "num" 1 322 "int16" `187 
f B "memset" 1 322 "void(*int8 destination,int8 value,int16 num)" `184 
v L "destination" 1 323 "*int8" `189 
v L "source" 1 323 "*int8" `190 
v L "num" 1 323 "int16" `191 
f B "memcpy" 1 323 "void(*int8 destination,*int8 source,int16 num)" `188  "String Prototypes:"
v L "cvalue" 1 326 "int8" `193 
f B "toupper" 1 326 "int8(int8 cvalue)" `192 
v L "cvalue" 1 327 "int8" `195 
f B "tolower" 1 327 "int8(int8 cvalue)" `194 
v L "string" 1 328 "*int8" `197 
v L "cstring" 1 328 "*int8" `198 
f B "sprintf" 1 328 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `196  "Data Manipulators Prototypes:"
v L "address" 1 331 "*int8" `201 
v L "bytes" 1 331 "int8" `202 
v L "value" 1 331 "int8" `203 
f B "shift_left" 1 331 "int8(*int8 address,int8 bytes,int8 value)" `200 
v L "address" 1 332 "*int8" `205 
v L "bytes" 1 332 "int8" `206 
v L "value" 1 332 "int8" `207 
f B "shift_right" 1 332 "int8(*int8 address,int8 bytes,int8 value)" `204 
v L "address" 1 333 "*int8" `209 
v L "bytes" 1 333 "int8" `210 
f B "rotate_left" 1 333 "void(*int8 address,int8 bytes)" `208 
v L "address" 1 334 "*int8" `212 
v L "bytes" 1 334 "int8" `213 
f B "rotate_right" 1 334 "void(*int8 address,int8 bytes)" `211 
v L "value" 1 335 "int8" `215 
f B "swap" 1 335 "void(int8 value)" `214 
v L "var" 1 336 "int16" `217 
v L "offset" 1 336 "int8" `218 
f B "make8" 1 336 "int8(int16 var,int8 offset)" `216 
v L "var" 1 337 "int32" `217 
v L "offset" 1 337 "int8" `221 
f G "make8" 1 337 "int8(int32 var,int8 offset)" `219 
v L "varhigh" 1 338 "int8" `223 
v L "varlow" 1 338 "int8" `224 
f B "make16" 1 338 "int16(int8 varhigh,int8 varlow)" `222 
v L "var1" 1 339 "int16" `226 
f B "make32" 1 339 "int32(int16 var1)" `225 
v L "var1" 1 340 "int16" `228 
v L "var2" 1 340 "int16" `229 
f G "make32" 1 340 "int32(int16 var1,int16 var2)" `227 
v L "var1" 1 341 "int16" `228 
v L "var2" 1 341 "int8" `232 
f B "make32" 1 341 "int32(int16 var1,int8 var2)" `230 
v L "var1" 1 342 "int16" `234 
v L "var2" 1 342 "int8" `235 
v L "var3" 1 342 "int8" `236 
f G "make32" 1 342 "int32(int16 var1,int8 var2,int8 var3)" `233 
v L "var1" 1 343 "int8" `238 
f G "make32" 1 343 "int32(int8 var1)" `237 
v L "var1" 1 344 "int8" `228 
v L "var2" 1 344 "int8" `241 
f B "make32" 1 344 "int32(int8 var1,int8 var2)" `239 
v L "var1" 1 345 "int8" `234 
v L "var2" 1 345 "int8" `235 
v L "var3" 1 345 "int8" `245 
f B "make32" 1 345 "int32(int8 var1,int8 var2,int8 var3)" `242 
v L "var1" 1 346 "int8" `247 
v L "var2" 1 346 "int8" `248 
v L "var3" 1 346 "int8" `249 
v L "var4" 1 346 "int8" `250 
f G "make32" 1 346 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `246 
v L "var1" 1 347 "int8" `228 
v L "var2" 1 347 "int16" `253 
f G "make32" 1 347 "int32(int8 var1,int16 var2)" `251 
v L "var1" 1 348 "int8" `234 
v L "var2" 1 348 "int16" `235 
v L "var3" 1 348 "int8" `257 
f B "make32" 1 348 "int32(int8 var1,int16 var2,int8 var3)" `254 
v L "var1" 1 349 "int8" `234 
v L "var2" 1 349 "int8" `235 
v L "var3" 1 349 "int16" `261 
f B "make32" 1 349 "int32(int8 var1,int8 var2,int16 var3)" `258 
v L "var" 1 350 "int8" `263 
v L "bit" 1 350 "int8" `264 
f B "bit_set" 1 350 "void(int8 var,int8 bit)" `262 
v L "var" 1 351 "int16" `263 
v L "bit" 1 351 "int8" `267 
f B "bit_set" 1 351 "void(int16 var,int8 bit)" `265 
v L "var" 1 352 "int32" `263 
v L "bit" 1 352 "int8" `270 
f B "bit_set" 1 352 "void(int32 var,int8 bit)" `268 
v L "var" 1 353 "int8" `272 
v L "bit" 1 353 "int8" `273 
f B "bit_clear" 1 353 "void(int8 var,int8 bit)" `271 
v L "var" 1 354 "int16" `272 
v L "bit" 1 354 "int8" `276 
f B "bit_clear" 1 354 "void(int16 var,int8 bit)" `274 
v L "var" 1 355 "int32" `272 
v L "bit" 1 355 "int8" `279 
f G "bit_clear" 1 355 "void(int32 var,int8 bit)" `277 
v L "var" 1 356 "int8" `281 
v L "bit" 1 356 "int8" `282 
f B "bit_test" 1 356 "int8(int8 var,int8 bit)" `280 
v L "var" 1 357 "int16" `281 
v L "bit" 1 357 "int8" `285 
f G "bit_test" 1 357 "int8(int16 var,int8 bit)" `283 
v L "var" 1 358 "int32" `281 
v L "bit" 1 358 "int8" `288 
f G "bit_test" 1 358 "int8(int32 var,int8 bit)" `286  "#use delay() Prototypes:"
v L "count" 1 361 "int8" `290 
f B "delay_cycles" 1 361 "void(int8 count)" `289 
v L "time" 1 362 "int16" `292 
f B "delay_ms" 1 362 "void(int16 time)" `291 
v L "time" 1 363 "int16" `294 
f B "delay_us" 1 363 "void(int16 time)" `293  "#use rs232() Prototypes:"
v L "cdata" 1 366 "int8" `296 
f B "putchar" 1 366 "void(int8 cdata)" `295 
v L "cdata" 1 367 "int8" `298 
v L "stream" 1 367 "int8" `299 
f G "putchar" 1 367 "void(int8 cdata,int8 stream)" `297 
v L "string" 1 368 "*int8" `301 
f B "puts" 1 368 "void(*int8 string)" `300 
v L "string" 1 369 "*int8" `303 
v L "stream" 1 369 "int8" `304 
f G "puts" 1 369 "void(*int8 string,int8 stream)" `302 
f B "getch" 1 370 "int8()" `305 
v L "stream" 1 371 "int8" `307 
f G "getch" 1 371 "int8(int8 stream)" `306 
v L "string" 1 372 "*int8" `309 
f B "gets" 1 372 "void(*int8 string)" `308 
v L "string" 1 373 "*int8" `311 
v L "stream" 1 373 "int8" `312 
f G "gets" 1 373 "void(*int8 string,int8 stream)" `310 
f B "kbhit" 1 374 "int8()" `313 
v L "stream" 1 375 "int8" `315 
f B "kbhit" 1 375 "int8(int8 stream)" `314 
v L "string" 1 376 "*int8" `317 
f B "printf" 1 376 "void(*int8 string,*int8 _VA_LIST)" `316 
v L "stream" 1 377 "int8" `320 
v L "string" 1 377 "*int8" `321 
f B "fprintf" 1 377 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `319 
f B "putc_send" 1 378 "void()" `323 
v L "stream" 1 379 "int8" `325 
f B "fputc_send" 1 379 "void(int8 stream)" `324 
f B "rcv_buffer_full" 1 380 "int8()" `326 
v L "stream" 1 381 "int8" `328 
f G "rcv_buffer_full" 1 381 "int8(int8 stream)" `327 
f B "rcv_buffer_bytes" 1 382 "int16()" `329 
v L "stream" 1 383 "int8" `331 
f G "rcv_buffer_bytes" 1 383 "int16(int8 stream)" `330 
f B "tx_buffer_full" 1 384 "int8()" `332 
v L "stream" 1 385 "int8" `334 
f G "tx_buffer_full" 1 385 "int8(int8 stream)" `333 
f B "tx_buffer_bytes" 1 386 "int16()" `335 
v L "stream" 1 387 "int8" `337 
f G "tx_buffer_bytes" 1 387 "int16(int8 stream)" `336  "#use i2c() Prototypes:"
f B "i2c_read" 1 390 "int8()" `338 
v L "stream" 1 391 "int8" `340 
f G "i2c_read" 1 391 "int8(int8 stream)" `339 
v L "stream" 1 392 "int8" `342 
v L "ack" 1 392 "int8" `343 
f G "i2c_read" 1 392 "int8(int8 stream,int8 ack)" `341 
v L "data" 1 393 "int8" `345 
f B "i2c_write" 1 393 "int8(int8 data)" `344 
v L "stream" 1 394 "int8" `347 
v L "data" 1 394 "int8" `348 
f G "i2c_write" 1 394 "int8(int8 stream,int8 data)" `346 
f B "i2c_start" 1 395 "void()" `349 
v L "stream" 1 396 "int8" `351 
f G "i2c_start" 1 396 "void(int8 stream)" `350 
v L "stream" 1 397 "int8" `353 
v L "restart" 1 397 "int8" `354 
f B "i2c_start" 1 397 "void(int8 stream,int8 restart)" `352 
f B "i2c_stop" 1 398 "void()" `355 
v L "stream" 1 399 "int8" `357 
f B "i2c_stop" 1 399 "void(int8 stream)" `356 
f B "i2c_isr_state" 1 400 "int8()" `358 
v L "addr" 1 401 "int8" `360 
f B "i2c_slaveaddr" 1 401 "void(int8 addr)" `359 
v L "stream" 1 402 "int8" `362 
v L "addr" 1 402 "int8" `363 
f G "i2c_slaveaddr" 1 402 "void(int8 stream,int8 addr)" `361 
f B "i2c_poll" 1 403 "int8()" `364 
v L "stream" 1 404 "int8" `366 
f B "i2c_poll" 1 404 "int8(int8 stream)" `365 
v L "baud" 1 405 "int32" `368 
f B "i2c_init" 1 405 "void(int32 baud)" `367 
v L "stream" 1 406 "int8" `370 
v L "baud" 1 406 "int32" `371 
f G "i2c_init" 1 406 "void(int8 stream,int32 baud)" `369  "#use spi() Prototypes:"
f B "spi_xfer" 1 409 "int8()" `372 
f G "spi_xfer" 1 410 "int16()" `373 
f G "spi_xfer" 1 411 "int32()" `374 
v L "data" 1 412 "int8" `376 
f G "spi_xfer" 1 412 "int8(int8 data)" `375 
v L "data" 1 413 "int16" `378 
f G "spi_xfer" 1 413 "int16(int16 data)" `377 
v L "data" 1 414 "int32" `380 
f G "spi_xfer" 1 414 "int32(int32 data)" `379 
v L "stream" 1 415 "int8" `382 
v L "data" 1 415 "int8" `383 
f B "spi_xfer" 1 415 "int8(int8 stream,int8 data)" `381 
v L "stream" 1 416 "int8" `382 
v L "data" 1 416 "int16" `386 
f G "spi_xfer" 1 416 "int16(int8 stream,int16 data)" `384 
v L "stream" 1 417 "int8" `382 
v L "data" 1 417 "int32" `389 
f G "spi_xfer" 1 417 "int32(int8 stream,int32 data)" `387 
v L "stream" 1 418 "int8" `391 
v L "data" 1 418 "int8" `392 
v L "bits" 1 418 "int8" `393 
f G "spi_xfer" 1 418 "int8(int8 stream,int8 data,int8 bits)" `390 
v L "stream" 1 419 "int8" `391 
v L "data" 1 419 "int16" `392 
v L "bits" 1 419 "int8" `397 
f G "spi_xfer" 1 419 "int16(int8 stream,int16 data,int8 bits)" `394 
v L "stream" 1 420 "int8" `391 
v L "data" 1 420 "int32" `392 
v L "bits" 1 420 "int8" `401 
f B "spi_xfer" 1 420 "int32(int8 stream,int32 data,int8 bits)" `398 
v L "baud" 1 421 "int32" `403 
f B "spi_init" 1 421 "void(int32 baud)" `402 
v L "stream" 1 422 "int8" `405 
v L "baud" 1 422 "int32" `406 
f B "spi_init" 1 422 "void(int8 stream,int32 baud)" `404 
v L "baud" 1 423 "int32" `408 
f B "spi_speed" 1 423 "void(int32 baud)" `407 
v L "stream" 1 424 "int8" `410 
v L "baud" 1 424 "int32" `411 
f B "spi_speed" 1 424 "void(int8 stream,int32 baud)" `409 
v L "stream" 1 425 "int8" `413 
v L "baud" 1 425 "int32" `414 
v L "clock" 1 425 "int32" `415 
f B "spi_speed" 1 425 "void(int8 stream,int32 baud,int32 clock)" `412 
v L "data" 1 426 "int8" `417 
f B "spi_prewrite" 1 426 "void(int8 data)" `416 
v L "data" 1 427 "int16" `419 
f B "spi_prewrite" 1 427 "void(int16 data)" `418 
v L "data" 1 428 "int32" `421 
f G "spi_prewrite" 1 428 "void(int32 data)" `420 
v L "??65535" 1 429 "int8" `423 
v L "data" 1 429 "int8" `424 
f B "spi_prewrite" 1 429 "void(int8 ,int8 data)" `422 
v L "??65535" 1 430 "int8" `423 
v L "data" 1 430 "int16" `427 
f G "spi_prewrite" 1 430 "void(int8 ,int16 data)" `425 
v L "??65535" 1 431 "int8" `423 
v L "data" 1 431 "int32" `430 
f G "spi_prewrite" 1 431 "void(int8 ,int32 data)" `428 
f B "spi_xfer_in" 1 432 "int8()" `431 
f G "spi_xfer_in" 1 433 "int16()" `432 
f G "spi_xfer_in" 1 434 "int32()" `433 
v L "bits" 1 435 "int8" `435 
f G "spi_xfer_in" 1 435 "int8(int8 bits)" `434 
v L "bits" 1 436 "int8" `437 
f G "spi_xfer_in" 1 436 "int16(int8 bits)" `436 
v L "bits" 1 437 "int8" `439 
f G "spi_xfer_in" 1 437 "int32(int8 bits)" `438 
v L "stream" 1 438 "int8" `441 
v L "bits" 1 438 "int8" `442 
f G "spi_xfer_in" 1 438 "int8(int8 stream,int8 bits)" `440 
v L "stream" 1 439 "int8" `441 
v L "bits" 1 439 "int8" `445 
f G "spi_xfer_in" 1 439 "int16(int8 stream,int8 bits)" `443 
v L "stream" 1 440 "int8" `441 
v L "bits" 1 440 "int8" `448 
f B "spi_xfer_in" 1 440 "int32(int8 stream,int8 bits)" `446  "#use rtos() Prototypes:"
f B "rtos_run" 1 443 "void()" `449 
f B "rtos_yield" 1 444 "void()" `450 
v L "task" 1 445 "int8" `452 
f B "rtos_enable" 1 445 "void(int8 task)" `451 
v L "task" 1 446 "int8" `454 
f B "rtos_disable" 1 446 "void(int8 task)" `453 
f B "rtos_terminate" 1 447 "void()" `455 
v L "flag" 1 448 "int8" `457 
f B "rtos_await" 1 448 "void(int8 flag)" `456 
v L "sem" 1 449 "int8" `459 
f B "rtos_wait" 1 449 "void(int8 sem)" `458 
v L "sem" 1 450 "int8" `461 
f B "rtos_signal" 1 450 "void(int8 sem)" `460 
v L "task" 1 451 "int8" `463 
v L "msg" 1 451 "int8" `464 
f B "rtos_msg_send" 1 451 "void(int8 task,int8 msg)" `462 
f B "rtos_msg_read" 1 452 "int8()" `465 
f B "rtos_msg_poll" 1 453 "int8()" `466 
v L "task" 1 454 "int8" `468 
f B "rtos_overrun" 1 454 "int8(int8 task)" `467 
v L "task" 1 455 "int8" `470 
v L "stat" 1 455 "*int8" `471 
f B "rtos_stats" 1 455 "void(int8 task,*int8 stat)" `469  "#use timer() Prototypes:"
f B "get_ticks" 1 458 "int8()" `472 
f B "get_ticks" 1 459 "int16()" `473 
f B "get_ticks" 1 460 "int32()" `474 
v L "stream" 1 461 "int8" `476 
f B "get_ticks" 1 461 "int8(int8 stream)" `475 
v L "stream" 1 462 "int8" `478 
f B "get_ticks" 1 462 "int16(int8 stream)" `477 
v L "stream" 1 463 "int8" `480 
f B "get_ticks" 1 463 "int32(int8 stream)" `479 
v L "value" 1 464 "int8" `482 
f B "set_ticks" 1 464 "void(int8 value)" `481 
v L "value" 1 465 "int16" `484 
f B "set_ticks" 1 465 "void(int16 value)" `483 
v L "value" 1 466 "int32" `486 
f B "set_ticks" 1 466 "void(int32 value)" `485 
v L "stream" 1 467 "int8" `488 
v L "value" 1 467 "int8" `489 
f B "set_ticks" 1 467 "void(int8 stream,int8 value)" `487 
v L "stream" 1 468 "int8" `488 
v L "value" 1 468 "int16" `492 
f B "set_ticks" 1 468 "void(int8 stream,int16 value)" `490 
v L "stream" 1 469 "int8" `488 
v L "value" 1 469 "int32" `495 
f B "set_ticks" 1 469 "void(int8 stream,int32 value)" `493  "#use pwm() Prototypes:"
f B "pwm_on" 1 472 "void()" `496 
v L "stream" 1 473 "int8" `498 
f G "pwm_on" 1 473 "void(int8 stream)" `497 
f B "pwm_off" 1 474 "void()" `499 
v L "stream" 1 475 "int8" `501 
f G "pwm_off" 1 475 "void(int8 stream)" `500 
v L "duty" 1 476 "int16" `503 
f B "pwm_set_duty" 1 476 "void(int16 duty)" `502 
v L "stream" 1 477 "int8" `505 
v L "duty" 1 477 "int16" `506 
f G "pwm_set_duty" 1 477 "void(int8 stream,int16 duty)" `504 
v L "percent" 1 478 "int16" `508 
f B "pwm_set_duty_percent" 1 478 "void(int16 percent)" `507 
v L "stream" 1 479 "int8" `510 
v L "percent" 1 479 "int16" `511 
f G "pwm_set_duty_percent" 1 479 "void(int8 stream,int16 percent)" `509 
v L "frequency" 1 480 "int32" `513 
f B "pwm_set_frequency" 1 480 "void(int32 frequency)" `512 
v L "stream" 1 481 "int8" `515 
v L "frequency" 1 481 "int32" `516 
f G "pwm_set_frequency" 1 481 "void(int8 stream,int32 frequency)" `514  "#use capture() Prototypes:"
f B "get_capture_time" 1 484 "int16()" `517 
v L "stream" 1 485 "int8" `519 
f G "get_capture_time" 1 485 "int16(int8 stream)" `518 
f B "get_capture_event" 1 486 "int8()" `520 
v L "stream" 1 487 "int8" `522 
f G "get_capture_event" 1 487 "int8(int8 stream)" `521  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 500 "int16" `524 
f B "goto_address" 1 500 "void(int16 address)" `523 
v L "label" 1 501 "int16" `526 
f B "label_address" 1 501 "int16(int16 label)" `525  "Program Memory Prototypes:"
v L "address" 1 504 "int16" `528 
v L "dataptr" 1 504 "*int8" `529 
v L "count" 1 504 "int16" `530 
f B "read_program_memory" 1 504 "void(int16 address,*int8 dataptr,int16 count)" `527 
v L "address" 1 505 "int16" `532 
f B "read_program_eeprom" 1 505 "int16(int16 address)" `531  "INT"
c L "read_program_eeprom" 1 1 4 "FUNCTION"
v L "interrupt" 1 511 "int32" `534 
f B "enable_interrupts" 1 511 "void(int32 interrupt)" `533 
v L "interrupt" 1 512 "int32" `536 
f B "disable_interrupts" 1 512 "void(int32 interrupt)" `535 
v L "interrupt" 1 513 "int32" `538 
f B "clear_interrupt" 1 513 "void(int32 interrupt)" `537 
v L "interrupt" 1 514 "int32" `540 
f B "interrupt_active" 1 514 "int8(int32 interrupt)" `539 
v L "interrupt" 1 515 "int32" `542 
f B "interrupt_enabled" 1 515 "int8(int32 interrupt)" `541 
v L "source" 1 516 "int8" `544 
v L "edge" 1 516 "int8" `545 
f B "ext_int_edge" 1 516 "void(int8 source,int8 edge)" `543 
v L "address" 1 517 "int16" `547 
f B "jump_to_irs" 1 517 "void(int16 address)" `546  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 519 "0x40"
d G "H_TO_L" 1 520 "0"
d G "GLOBAL" 1 522 "0x0BC0"
d G "PERIPH" 1 523 "0x0B40"
d G "INT_RTCC" 1 524 "0x000B20"
d G "INT_RB" 1 525 "0x00FF0B08"
d G "INT_EXT_L2H" 1 526 "0x50000B10"
d G "INT_EXT_H2L" 1 527 "0x60000B10"
d G "INT_EXT" 1 528 "0x000B10"
d G "INT_AD" 1 529 "0x008C40"
d G "INT_TIMER1" 1 530 "0x008C01"
d G "INT_TIMER2" 1 531 "0x008C02"
d G "INT_CCP1" 1 532 "0x008C04"
d G "INT_SSP" 1 533 "0x008C08"
d G "INT_TIMER0" 1 534 "0x000B20"
D G "__LCD_C__" 2 76 ""
C L "jump_to_irs" 2 2 2 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 1 "FUNCTION"
C L "jump_to_irs" 2 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 2 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `558  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 2 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 2 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 2 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 2 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 2 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 2 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 2 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 2 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 2 187 "20"
f G "lcd_read_nibble" 2 190 "int8()" `559 
F G "lcd_read_byte" 2 193 "int8()" `560 
V L "low" 2 194 "int8" `561 
V L "high" 2 194 "int8" `562 
F G "lcd_read_nibble" 2 240 "int8()" `559 
V L "n" 2 242 "int8" `563 
C L "lcd_read_nibble" 2 2 1 "FUNCTION"
V L "n" 2 256 "int8" `565 
F G "lcd_send_nibble" 2 257 "void(int8 n)" `564 
C L "lcd_send_nibble" 2 2 1 "FUNCTION"
V L "address" 2 274 "int8" `567 
V L "n" 2 274 "int8" `568 
F G "lcd_send_byte" 2 275 "void(int8 address,int8 n)" `566 
F G "lcd_init" 2 300 "void()" `569 
V L "i" 2 301 "int8" `570 
V L "LCD_INIT_STRING" 2 302 "int8[4]" `571 
C L "lcd_init" 2 2 2 "FUNCTION"
V L "x" 2 345 "int8" `573 
V L "y" 2 345 "int8" `574 
F G "lcd_gotoxy" 2 346 "void(int8 x,int8 y)" `572 
V L "address" 2 347 "int8" `575 
V L "c" 2 363 "int8" `577 
F G "lcd_putc" 2 364 "void(int8 c)" `576 
V L "x" 2 406 "int8" `579 
V L "y" 2 406 "int8" `580 
F G "lcd_getc" 2 407 "int8(int8 x,int8 y)" `578 
V L "value" 2 408 "int8" `581 
C L "lcd_getc" 2 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 2 2 5 "FUNCTION"
V L "which" 2 424 "int8" `583 
V L "ptr" 2 424 "*int8" `584 
F G "lcd_set_cgram_char" 2 425 "void(int8 which,*int8 ptr)" `582 
V L "i" 2 426 "int8" `585 
C L "lcd_set_cgram_char" 2 2 1 "FUNCTION"
V L "on" 2 443 "int8" `587 
F G "lcd_cursor_on" 2 444 "void(int8 on)" `586 
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
V G "i" 0 27 "int8" `592 
V G "second" 0 27 "int8" `593 
V G "minute" 0 27 "int8" `594 
V G "hour" 0 27 "int8" `595 
V G "date" 0 27 "int8" `596 
V G "month" 0 27 "int8" `597 
V G "year" 0 27 "int8" `598 
V L "number" 0 28 "int8" `600 
F G "bcd_to_decimal" 0 28 "int8(int8 number)" `599  "Convert BCD to decimal function"
V L "number" 0 31 "int8" `605 
F G "decimal_to_bcd" 0 31 "int8(int8 number)" `604  "Convert decimal to BCD function"
F G "ds3231_display" 0 34 "void()" `609 
C L "ds3231_display" 0 42 1 "FUNCTION"
C L "ds3231_display" 0 42 1 "FUNCTION"
C L "ds3231_display" 0 42 1 "FUNCTION"
C L "ds3231_display" 0 42 1 "FUNCTION"
C L "ds3231_display" 0 42 1 "FUNCTION"
C L "ds3231_display" 0 42 1 "FUNCTION"
F G "blink" 0 54 "void()" `619 
V L "j" 0 55 "int8" `620 
V L "x" 0 61 "int8" `622 
V L "y" 0 61 "int8" `623 
V L "parameter" 0 61 "int8" `624 
F G "edit" 0 61 "int8(int8 x,int8 y,int8 parameter)" `621 
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
C L "edit" 0 42 1 "FUNCTION"
F G "MAIN" 0 92 "void()" `629 
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 2 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
C L "MAIN" 0 42 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1

CCS PCM C Compiler, Version 5.015, 5967               06-Nov-20 13:43

               Filename:   D:\PIC programming\CCS compiler\Rtc interfacing\main.lst

               ROM used:   1098 words (54%)
                           Largest free fragment is 950
               RAM used:   11 (9%) at main() level
                           28 (22%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   345
0003:  NOP
.................... /* 
....................  * Interfacing PIC16F84A microcontroller with DS3231 RTCC. 
....................  * C Code for CCS C compiler. 
....................  * This is a free software with NO WARRANTY. 
....................  * https://simple-circuit.com/ 
....................  */ 
....................   
.................... // LCD module connections 
.................... #define LCD_RS_PIN     PIN_B0 
.................... #define LCD_RW_PIN     PIN_B1 
.................... #define LCD_ENABLE_PIN PIN_B2 
.................... #define LCD_DATA4      PIN_B3 
.................... #define LCD_DATA5      PIN_B4 
.................... #define LCD_DATA6      PIN_B5 
.................... #define LCD_DATA7      PIN_B6 
.................... // end LCD module connections 
....................   
.................... #include <16F72.h> 
.................... //////////// Standard Header file for the PIC16F72 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F72 
0004:  DATA 20,10
0005:  DATA 00,00
0006:  DATA D4,24
0007:  DATA CD,22
0008:  DATA 3A,10
0009:  DATA 20,10
000A:  DATA 3A,10
000B:  DATA 20,1D
000C:  DATA 00,01
000D:  DATA C4,20
000E:  DATA D4,22
000F:  DATA 3A,10
0010:  DATA 20,10
0011:  DATA 2F,10
0012:  DATA A0,17
0013:  DATA 32,18
0014:  DATA 00,00
*
0129:  MOVF   0B,W
012A:  MOVWF  2E
012B:  BCF    0B.7
012C:  BSF    03.5
012D:  BSF    03.6
012E:  BSF    0C.7
012F:  BSF    0C.0
0130:  NOP
0131:  NOP
0132:  BCF    03.5
0133:  BCF    03.6
0134:  BTFSC  2E.7
0135:  BSF    0B.7
0136:  BSF    03.6
0137:  MOVF   0C,W
0138:  ANDLW  7F
0139:  BTFSC  03.2
013A:  GOTO   17D
013B:  BCF    03.6
013C:  MOVWF  2E
013D:  BSF    03.6
013E:  MOVF   0D,W
013F:  BCF    03.6
0140:  MOVWF  2F
0141:  BSF    03.6
0142:  MOVF   0F,W
0143:  BCF    03.6
0144:  MOVWF  30
0145:  MOVF   2E,W
0146:  MOVWF  31
0147:  CALL   0FD
0148:  MOVF   2F,W
0149:  BSF    03.6
014A:  MOVWF  0D
014B:  BCF    03.6
014C:  MOVF   30,W
014D:  BSF    03.6
014E:  MOVWF  0F
014F:  BCF    03.6
0150:  MOVF   0B,W
0151:  MOVWF  31
0152:  BCF    0B.7
0153:  BSF    03.5
0154:  BSF    03.6
0155:  BSF    0C.7
0156:  BSF    0C.0
0157:  NOP
0158:  NOP
0159:  BCF    03.5
015A:  BCF    03.6
015B:  BTFSC  31.7
015C:  BSF    0B.7
015D:  BSF    03.6
015E:  RLF    0C,W
015F:  RLF    0E,W
0160:  ANDLW  7F
0161:  BTFSC  03.2
0162:  GOTO   17D
0163:  BCF    03.6
0164:  MOVWF  2E
0165:  BSF    03.6
0166:  MOVF   0D,W
0167:  BCF    03.6
0168:  MOVWF  2F
0169:  BSF    03.6
016A:  MOVF   0F,W
016B:  BCF    03.6
016C:  MOVWF  30
016D:  MOVF   2E,W
016E:  MOVWF  31
016F:  CALL   0FD
0170:  MOVF   2F,W
0171:  BSF    03.6
0172:  MOVWF  0D
0173:  BCF    03.6
0174:  MOVF   30,W
0175:  BSF    03.6
0176:  MOVWF  0F
0177:  INCF   0D,F
0178:  BTFSC  03.2
0179:  INCF   0F,F
017A:  BCF    03.6
017B:  GOTO   129
017C:  BSF    03.6
017D:  BCF    03.6
017E:  RETURN
017F:  MOVF   31,W
0180:  CLRF   21
0181:  SUBWF  30,W
0182:  BTFSC  03.0
0183:  GOTO   187
0184:  MOVF   30,W
0185:  MOVWF  20
0186:  GOTO   193
0187:  CLRF   20
0188:  MOVLW  08
0189:  MOVWF  32
018A:  RLF    30,F
018B:  RLF    20,F
018C:  MOVF   31,W
018D:  SUBWF  20,W
018E:  BTFSC  03.0
018F:  MOVWF  20
0190:  RLF    21,F
0191:  DECFSZ 32,F
0192:  GOTO   18A
0193:  RETURN
0194:  MOVF   21,W
0195:  MOVF   2E,W
0196:  MOVWF  30
0197:  MOVLW  64
0198:  MOVWF  31
0199:  CALL   17F
019A:  MOVF   20,W
019B:  MOVWF  2E
019C:  MOVF   21,W
019D:  MOVLW  30
019E:  BTFSS  03.2
019F:  GOTO   1A7
01A0:  BTFSS  2F.1
01A1:  GOTO   1AE
01A2:  BTFSC  2F.3
01A3:  GOTO   1AE
01A4:  BTFSC  2F.4
01A5:  MOVLW  20
01A6:  GOTO   1AA
01A7:  BCF    2F.3
01A8:  BCF    2F.4
01A9:  BSF    2F.0
01AA:  ADDWF  21,F
01AB:  MOVF   21,W
01AC:  MOVWF  31
01AD:  CALL   0FD
01AE:  MOVF   2E,W
01AF:  MOVWF  30
01B0:  MOVLW  0A
01B1:  MOVWF  31
01B2:  CALL   17F
01B3:  MOVF   20,W
01B4:  MOVWF  2E
01B5:  MOVF   21,W
01B6:  MOVLW  30
01B7:  BTFSS  03.2
01B8:  GOTO   1BF
01B9:  BTFSC  2F.3
01BA:  GOTO   1C3
01BB:  BTFSS  2F.0
01BC:  GOTO   1C3
01BD:  BTFSC  2F.4
01BE:  MOVLW  20
01BF:  ADDWF  21,F
01C0:  MOVF   21,W
01C1:  MOVWF  31
01C2:  CALL   0FD
01C3:  MOVLW  30
01C4:  ADDWF  2E,F
01C5:  MOVF   2E,W
01C6:  MOVWF  31
01C7:  CALL   0FD
01C8:  RETURN
*
02BF:  CLRF   20
02C0:  CLRF   21
02C1:  MOVF   2E,W
02C2:  BCF    03.0
02C3:  BTFSC  2F.0
02C4:  ADDWF  20,F
02C5:  RRF    20,F
02C6:  RRF    21,F
02C7:  BTFSC  2F.1
02C8:  ADDWF  20,F
02C9:  RRF    20,F
02CA:  RRF    21,F
02CB:  BTFSC  2F.2
02CC:  ADDWF  20,F
02CD:  RRF    20,F
02CE:  RRF    21,F
02CF:  BTFSC  2F.3
02D0:  ADDWF  20,F
02D1:  RRF    20,F
02D2:  RRF    21,F
02D3:  BTFSC  2F.4
02D4:  ADDWF  20,F
02D5:  RRF    20,F
02D6:  RRF    21,F
02D7:  BTFSC  2F.5
02D8:  ADDWF  20,F
02D9:  RRF    20,F
02DA:  RRF    21,F
02DB:  BTFSC  2F.6
02DC:  ADDWF  20,F
02DD:  RRF    20,F
02DE:  RRF    21,F
02DF:  BTFSC  2F.7
02E0:  ADDWF  20,F
02E1:  RRF    20,F
02E2:  RRF    21,F
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,PUT,NOPROTECT 
.................... #use delay(clock = 14745600) 
*
0015:  MOVLW  32
0016:  MOVWF  04
0017:  MOVF   00,W
0018:  BTFSC  03.2
0019:  GOTO   027
001A:  MOVLW  04
001B:  MOVWF  21
001C:  CLRF   20
001D:  DECFSZ 20,F
001E:  GOTO   01D
001F:  DECFSZ 21,F
0020:  GOTO   01C
0021:  MOVLW  C7
0022:  MOVWF  20
0023:  DECFSZ 20,F
0024:  GOTO   023
0025:  DECFSZ 00,F
0026:  GOTO   01A
0027:  RETURN
.................... #use fast_io(A) 
.................... #use fast_io(B) 
.................... #include <lcd.c>   // include LCD driver source file 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0071:  BSF    03.5
0072:  BSF    06.3
....................    output_float(LCD_DATA5); 
0073:  BSF    06.4
....................    output_float(LCD_DATA6); 
0074:  BSF    06.5
....................    output_float(LCD_DATA7); 
0075:  BSF    06.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0076:  BCF    03.5
0077:  BSF    06.1
....................    delay_cycles(1); 
0078:  NOP
....................    lcd_output_enable(1); 
0079:  BSF    06.2
....................    delay_cycles(1); 
007A:  NOP
....................    high = lcd_read_nibble(); 
007B:  CALL   046
007C:  MOVF   21,W
007D:  MOVWF  39
....................        
....................    lcd_output_enable(0); 
007E:  BCF    06.2
....................    delay_cycles(1); 
007F:  NOP
....................    lcd_output_enable(1); 
0080:  BSF    06.2
....................    delay_us(1); 
0081:  GOTO   082
0082:  NOP
....................    low = lcd_read_nibble(); 
0083:  CALL   046
0084:  MOVF   21,W
0085:  MOVWF  38
....................        
....................    lcd_output_enable(0); 
0086:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0087:  BSF    03.5
0088:  BCF    06.3
....................    output_drive(LCD_DATA5); 
0089:  BCF    06.4
....................    output_drive(LCD_DATA6); 
008A:  BCF    06.5
....................    output_drive(LCD_DATA7); 
008B:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
008C:  BCF    03.5
008D:  SWAPF  39,W
008E:  MOVWF  20
008F:  MOVLW  F0
0090:  ANDWF  20,F
0091:  MOVF   20,W
0092:  IORWF  38,W
0093:  MOVWF  21
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0046:  CLRF   3A
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0047:  MOVLW  00
0048:  BTFSC  06.3
0049:  MOVLW  01
004A:  IORWF  3A,F
....................    n |= input(LCD_DATA5) << 1; 
004B:  MOVLW  00
004C:  BTFSC  06.4
004D:  MOVLW  01
004E:  MOVWF  20
004F:  BCF    03.0
0050:  RLF    20,F
0051:  MOVF   20,W
0052:  IORWF  3A,F
....................    n |= input(LCD_DATA6) << 2; 
0053:  MOVLW  00
0054:  BTFSC  06.5
0055:  MOVLW  01
0056:  MOVWF  20
0057:  RLF    20,F
0058:  RLF    20,F
0059:  MOVLW  FC
005A:  ANDWF  20,F
005B:  MOVF   20,W
005C:  IORWF  3A,F
....................    n |= input(LCD_DATA7) << 3; 
005D:  MOVLW  00
005E:  BTFSC  06.6
005F:  MOVLW  01
0060:  MOVWF  20
0061:  RLF    20,F
0062:  RLF    20,F
0063:  RLF    20,F
0064:  MOVLW  F8
0065:  ANDWF  20,F
0066:  MOVF   20,W
0067:  IORWF  3A,F
....................     
....................    return(n); 
0068:  MOVF   3A,W
0069:  MOVWF  21
....................   #else 
006A:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0028:  BTFSC  39.0
0029:  GOTO   02C
002A:  BCF    06.3
002B:  GOTO   02D
002C:  BSF    06.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
002D:  BTFSC  39.1
002E:  GOTO   031
002F:  BCF    06.4
0030:  GOTO   032
0031:  BSF    06.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0032:  BTFSC  39.2
0033:  GOTO   036
0034:  BCF    06.5
0035:  GOTO   037
0036:  BSF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0037:  BTFSC  39.3
0038:  GOTO   03B
0039:  BCF    06.6
003A:  GOTO   03C
003B:  BSF    06.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
003C:  NOP
....................    lcd_output_enable(1); 
003D:  BSF    06.2
....................    delay_us(2); 
003E:  MOVLW  01
003F:  MOVWF  20
0040:  DECFSZ 20,F
0041:  GOTO   040
0042:  GOTO   043
0043:  NOP
....................    lcd_output_enable(0); 
0044:  BCF    06.2
0045:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
006B:  BSF    03.5
006C:  BCF    06.2
....................    lcd_rs_tris(); 
006D:  BCF    06.0
....................    lcd_rw_tris(); 
006E:  BCF    06.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
006F:  BCF    03.5
0070:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0094:  MOVF   21,W
0095:  MOVWF  38
0096:  BTFSC  38.7
0097:  GOTO   071
....................    lcd_output_rs(address); 
0098:  MOVF   36,F
0099:  BTFSS  03.2
009A:  GOTO   09D
009B:  BCF    06.0
009C:  GOTO   09E
009D:  BSF    06.0
....................    delay_cycles(1); 
009E:  NOP
....................    lcd_output_rw(0); 
009F:  BCF    06.1
....................    delay_cycles(1); 
00A0:  NOP
....................    lcd_output_enable(0); 
00A1:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
00A2:  SWAPF  37,W
00A3:  MOVWF  38
00A4:  MOVLW  0F
00A5:  ANDWF  38,F
00A6:  MOVF   38,W
00A7:  MOVWF  39
00A8:  CALL   028
....................    lcd_send_nibble(n & 0xf); 
00A9:  MOVF   37,W
00AA:  ANDLW  0F
00AB:  MOVWF  38
00AC:  MOVWF  39
00AD:  CALL   028
00AE:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00AF:  MOVLW  28
00B0:  MOVWF  2C
00B1:  MOVLW  0C
00B2:  MOVWF  2D
00B3:  MOVLW  01
00B4:  MOVWF  2E
00B5:  MOVLW  06
00B6:  MOVWF  2F
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00B7:  BCF    06.2
....................    lcd_output_rs(0); 
00B8:  BCF    06.0
....................    lcd_output_rw(0); 
00B9:  BCF    06.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00BA:  BSF    03.5
00BB:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00BC:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00BD:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00BE:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00BF:  BCF    06.2
....................    lcd_rs_tris(); 
00C0:  BCF    06.0
....................    lcd_rw_tris(); 
00C1:  BCF    06.1
....................  #endif 
....................      
....................    delay_ms(15); 
00C2:  MOVLW  0F
00C3:  BCF    03.5
00C4:  MOVWF  32
00C5:  CALL   015
....................    for(i=1;i<=3;++i) 
00C6:  MOVLW  01
00C7:  MOVWF  2B
00C8:  MOVF   2B,W
00C9:  SUBLW  03
00CA:  BTFSS  03.0
00CB:  GOTO   0D4
....................    { 
....................        lcd_send_nibble(3); 
00CC:  MOVLW  03
00CD:  MOVWF  39
00CE:  CALL   028
....................        delay_ms(5); 
00CF:  MOVLW  05
00D0:  MOVWF  32
00D1:  CALL   015
00D2:  INCF   2B,F
00D3:  GOTO   0C8
....................    } 
....................     
....................    lcd_send_nibble(2); 
00D4:  MOVLW  02
00D5:  MOVWF  39
00D6:  CALL   028
....................    delay_ms(5); 
00D7:  MOVLW  05
00D8:  MOVWF  32
00D9:  CALL   015
....................    for(i=0;i<=3;++i) 
00DA:  CLRF   2B
00DB:  MOVF   2B,W
00DC:  SUBLW  03
00DD:  BTFSS  03.0
00DE:  GOTO   0EA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00DF:  MOVLW  2C
00E0:  ADDWF  2B,W
00E1:  MOVWF  04
00E2:  MOVF   00,W
00E3:  MOVWF  30
00E4:  CLRF   36
00E5:  MOVF   30,W
00E6:  MOVWF  37
00E7:  CALL   06B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E8:  INCF   2B,F
00E9:  GOTO   0DB
00EA:  GOTO   34E (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00EB:  DECFSZ 33,W
00EC:  GOTO   0EE
00ED:  GOTO   0F1
....................       address=LCD_LINE_TWO; 
00EE:  MOVLW  40
00EF:  MOVWF  34
00F0:  GOTO   0F2
....................    else 
....................       address=0; 
00F1:  CLRF   34
....................       
....................    address+=x-1; 
00F2:  MOVLW  01
00F3:  SUBWF  32,W
00F4:  ADDWF  34,F
....................    lcd_send_byte(0,0x80|address); 
00F5:  MOVF   34,W
00F6:  IORLW  80
00F7:  MOVWF  35
00F8:  CLRF   36
00F9:  MOVF   35,W
00FA:  MOVWF  37
00FB:  CALL   06B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00FC:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00FD:  MOVF   31,W
00FE:  XORLW  07
00FF:  BTFSC  03.2
0100:  GOTO   10B
0101:  XORLW  0B
0102:  BTFSC  03.2
0103:  GOTO   110
0104:  XORLW  06
0105:  BTFSC  03.2
0106:  GOTO   118
0107:  XORLW  02
0108:  BTFSC  03.2
0109:  GOTO   11E
010A:  GOTO   123
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
010B:  MOVLW  01
010C:  MOVWF  32
010D:  MOVWF  33
010E:  CALL   0EB
010F:  GOTO   128
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0110:  CLRF   36
0111:  MOVLW  01
0112:  MOVWF  37
0113:  CALL   06B
....................                      delay_ms(2); 
0114:  MOVLW  02
0115:  MOVWF  32
0116:  CALL   015
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0117:  GOTO   128
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0118:  MOVLW  01
0119:  MOVWF  32
011A:  MOVLW  02
011B:  MOVWF  33
011C:  CALL   0EB
011D:  GOTO   128
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
011E:  CLRF   36
011F:  MOVLW  10
0120:  MOVWF  37
0121:  CALL   06B
0122:  GOTO   128
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0123:  MOVLW  01
0124:  MOVWF  36
0125:  MOVF   31,W
0126:  MOVWF  37
0127:  CALL   06B
....................      #endif 
....................    } 
0128:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #use I2C(MASTER, SDA=PIN_A0, SCL=PIN_A1, FAST=100000) 
*
0246:  MOVLW  08
0247:  MOVWF  21
0248:  GOTO   249
0249:  GOTO   24A
024A:  NOP
024B:  BCF    05.1
024C:  BSF    03.5
024D:  BCF    05.1
024E:  GOTO   24F
024F:  BCF    03.5
0250:  RLF    2B,F
0251:  BCF    05.0
0252:  BTFSS  03.0
0253:  GOTO   257
0254:  BSF    03.5
0255:  BSF    05.0
0256:  BCF    03.5
0257:  BTFSC  03.0
0258:  GOTO   25C
0259:  BSF    03.5
025A:  BCF    05.0
025B:  BCF    03.5
025C:  BSF    03.5
025D:  BSF    05.1
025E:  BCF    03.5
025F:  BTFSS  05.1
0260:  GOTO   25F
0261:  DECFSZ 21,F
0262:  GOTO   248
0263:  GOTO   264
0264:  GOTO   265
0265:  NOP
0266:  BCF    05.1
0267:  BSF    03.5
0268:  BCF    05.1
0269:  NOP
026A:  BSF    05.0
026B:  GOTO   26C
026C:  GOTO   26D
026D:  BSF    05.1
026E:  BCF    03.5
026F:  BTFSS  05.1
0270:  GOTO   26F
0271:  CLRF   21
0272:  GOTO   273
0273:  BTFSC  05.0
0274:  BSF    21.0
0275:  BCF    05.1
0276:  BSF    03.5
0277:  BCF    05.1
0278:  BCF    03.5
0279:  BCF    05.0
027A:  BSF    03.5
027B:  BCF    05.0
027C:  BCF    03.5
027D:  RETURN
027E:  MOVLW  08
027F:  MOVWF  2C
0280:  MOVF   20,W
0281:  MOVWF  2D
0282:  BSF    03.5
0283:  BSF    05.0
0284:  GOTO   285
0285:  BSF    05.1
0286:  BCF    03.5
0287:  BTFSS  05.1
0288:  GOTO   287
0289:  BTFSC  05.0
028A:  BSF    03.0
028B:  BTFSS  05.0
028C:  BCF    03.0
028D:  RLF    21,F
028E:  GOTO   28F
028F:  GOTO   290
0290:  NOP
0291:  BSF    03.5
0292:  BCF    05.1
0293:  BCF    03.5
0294:  BCF    05.1
0295:  DECFSZ 2C,F
0296:  GOTO   282
0297:  BSF    03.5
0298:  BSF    05.0
0299:  GOTO   29A
029A:  BCF    03.5
029B:  BCF    05.0
029C:  MOVF   2D,W
029D:  BTFSC  03.2
029E:  GOTO   2A2
029F:  BSF    03.5
02A0:  BCF    05.0
02A1:  BCF    03.5
02A2:  NOP
02A3:  BSF    03.5
02A4:  BSF    05.1
02A5:  BCF    03.5
02A6:  BTFSS  05.1
02A7:  GOTO   2A6
02A8:  GOTO   2A9
02A9:  GOTO   2AA
02AA:  NOP
02AB:  BCF    05.1
02AC:  BSF    03.5
02AD:  BCF    05.1
02AE:  GOTO   2AF
02AF:  BCF    03.5
02B0:  BCF    05.0
02B1:  BSF    03.5
02B2:  BCF    05.0
02B3:  BCF    03.5
02B4:  RETURN
....................   
....................   
.................... int8 i, second, minute, hour, date, month, year; 
.................... int8 bcd_to_decimal(number){                     // Convert BCD to decimal function 
....................   return((number >> 4) * 10 + (number & 0x0F)); 
02B5:  SWAPF  2B,W
02B6:  MOVWF  20
02B7:  MOVLW  0F
02B8:  ANDWF  20,F
02B9:  MOVF   20,W
02BA:  MOVWF  2D
02BB:  MOVF   2D,W
02BC:  MOVWF  2E
02BD:  MOVLW  0A
02BE:  MOVWF  2F
*
02E3:  MOVF   21,W
02E4:  MOVWF  2C
02E5:  MOVF   2B,W
02E6:  ANDLW  0F
02E7:  ADDWF  21,W
02E8:  MOVWF  21
02E9:  RETURN
.................... } 
.................... int8 decimal_to_bcd(number){                     // Convert decimal to BCD function 
....................   return(((number / 10) << 4) + (number % 10)); 
*
0234:  MOVF   2B,W
0235:  MOVWF  30
0236:  MOVLW  0A
0237:  MOVWF  31
0238:  CALL   17F
0239:  SWAPF  21,W
023A:  MOVWF  2C
023B:  MOVLW  F0
023C:  ANDWF  2C,F
023D:  MOVF   2B,W
023E:  MOVWF  30
023F:  MOVLW  0A
0240:  MOVWF  31
0241:  CALL   17F
0242:  MOVF   20,W
0243:  ADDWF  2C,W
0244:  MOVWF  21
0245:  RETURN
.................... } 
.................... void ds3231_display(){ 
....................   second = bcd_to_decimal(second); 
*
02EA:  MOVF   25,W
02EB:  MOVWF  2B
02EC:  CALL   2B5
02ED:  MOVF   21,W
02EE:  MOVWF  25
....................   minute = bcd_to_decimal(minute); 
02EF:  MOVF   26,W
02F0:  MOVWF  2B
02F1:  CALL   2B5
02F2:  MOVF   21,W
02F3:  MOVWF  26
....................   hour   = bcd_to_decimal(hour); 
02F4:  MOVF   27,W
02F5:  MOVWF  2B
02F6:  CALL   2B5
02F7:  MOVF   21,W
02F8:  MOVWF  27
....................   date   = bcd_to_decimal(date); 
02F9:  MOVF   28,W
02FA:  MOVWF  2B
02FB:  CALL   2B5
02FC:  MOVF   21,W
02FD:  MOVWF  28
....................   month  = bcd_to_decimal(month); 
02FE:  MOVF   29,W
02FF:  MOVWF  2B
0300:  CALL   2B5
0301:  MOVF   21,W
0302:  MOVWF  29
....................   year   = bcd_to_decimal(year); 
0303:  MOVF   2A,W
0304:  MOVWF  2B
0305:  CALL   2B5
0306:  MOVF   21,W
0307:  MOVWF  2A
....................   lcd_gotoxy(13, 1);    
0308:  MOVLW  0D
0309:  MOVWF  32
030A:  MOVLW  01
030B:  MOVWF  33
030C:  CALL   0EB
....................   printf(lcd_putc,"%02u", second);               // Display seconds 
030D:  MOVF   25,W
030E:  MOVWF  2E
030F:  MOVLW  01
0310:  MOVWF  2F
0311:  CALL   194
....................   lcd_gotoxy(10, 1);    
0312:  MOVLW  0A
0313:  MOVWF  32
0314:  MOVLW  01
0315:  MOVWF  33
0316:  CALL   0EB
....................   printf(lcd_putc,"%02u", minute);               // Display minutes 
0317:  MOVF   26,W
0318:  MOVWF  2E
0319:  MOVLW  01
031A:  MOVWF  2F
031B:  CALL   194
....................   lcd_gotoxy(7, 1);    
031C:  MOVLW  07
031D:  MOVWF  32
031E:  MOVLW  01
031F:  MOVWF  33
0320:  CALL   0EB
....................   printf(lcd_putc,"%02u", hour);                 // Display hours 
0321:  MOVF   27,W
0322:  MOVWF  2E
0323:  MOVLW  01
0324:  MOVWF  2F
0325:  CALL   194
....................   lcd_gotoxy(7, 2);    
0326:  MOVLW  07
0327:  MOVWF  32
0328:  MOVLW  02
0329:  MOVWF  33
032A:  CALL   0EB
....................   printf(lcd_putc,"%02u", date);                 // Display date 
032B:  MOVF   28,W
032C:  MOVWF  2E
032D:  MOVLW  01
032E:  MOVWF  2F
032F:  CALL   194
....................   lcd_gotoxy(10, 2);    
0330:  MOVLW  0A
0331:  MOVWF  32
0332:  MOVLW  02
0333:  MOVWF  33
0334:  CALL   0EB
....................   printf(lcd_putc,"%02u", month);                // Display month 
0335:  MOVF   29,W
0336:  MOVWF  2E
0337:  MOVLW  01
0338:  MOVWF  2F
0339:  CALL   194
....................   lcd_gotoxy(15, 2);    
033A:  MOVLW  0F
033B:  MOVWF  32
033C:  MOVLW  02
033D:  MOVWF  33
033E:  CALL   0EB
....................   printf(lcd_putc,"%02u", year);                 // Display year 
033F:  MOVF   2A,W
0340:  MOVWF  2E
0341:  MOVLW  01
0342:  MOVWF  2F
0343:  CALL   194
0344:  GOTO   445 (RETURN)
.................... } 
.................... void blink(){ 
*
01C9:  CLRF   2E
....................   int8 j = 0; 
....................   while(j < 10 && input(PIN_A2) && input(PIN_A3)){ 
01CA:  MOVF   2E,W
01CB:  SUBLW  09
01CC:  BTFSS  03.0
01CD:  GOTO   1D7
01CE:  BTFSS  05.2
01CF:  GOTO   1D7
01D0:  BTFSS  05.3
01D1:  GOTO   1D7
....................     j++; 
01D2:  INCF   2E,F
....................     delay_ms(25); 
01D3:  MOVLW  19
01D4:  MOVWF  32
01D5:  CALL   015
01D6:  GOTO   1CA
....................   } 
01D7:  RETURN
.................... } 
.................... unsigned int8 edit(x, y, parameter){ 
....................   while(!input(PIN_A2));                         // Wait until button RB0 is released 
01D8:  BTFSS  05.2
01D9:  GOTO   1D8
....................   while(TRUE){ 
....................     while(!input(PIN_A3)){                       // If button RB1 is pressed 
01DA:  BTFSC  05.3
01DB:  GOTO   214
....................       parameter++; 
01DC:  INCF   2D,F
....................       if(i == 0 && parameter > 23)               // If hours > 23 ==> hours = 0 
01DD:  MOVF   24,F
01DE:  BTFSS  03.2
01DF:  GOTO   1E4
01E0:  MOVF   2D,W
01E1:  SUBLW  17
01E2:  BTFSS  03.0
....................         parameter = 0; 
01E3:  CLRF   2D
....................       if(i == 1 && parameter > 59)               // If minutes > 59 ==> minutes = 0 
01E4:  DECFSZ 24,W
01E5:  GOTO   1EA
01E6:  MOVF   2D,W
01E7:  SUBLW  3B
01E8:  BTFSS  03.0
....................         parameter = 0; 
01E9:  CLRF   2D
....................       if(i == 2 && parameter > 31)               // If date > 31 ==> date = 1 
01EA:  MOVF   24,W
01EB:  SUBLW  02
01EC:  BTFSS  03.2
01ED:  GOTO   1F4
01EE:  MOVF   2D,W
01EF:  SUBLW  1F
01F0:  BTFSC  03.0
01F1:  GOTO   1F4
....................         parameter = 1; 
01F2:  MOVLW  01
01F3:  MOVWF  2D
....................       if(i == 3 && parameter > 12)               // If month > 12 ==> month = 1 
01F4:  MOVF   24,W
01F5:  SUBLW  03
01F6:  BTFSS  03.2
01F7:  GOTO   1FE
01F8:  MOVF   2D,W
01F9:  SUBLW  0C
01FA:  BTFSC  03.0
01FB:  GOTO   1FE
....................         parameter = 1; 
01FC:  MOVLW  01
01FD:  MOVWF  2D
....................       if(i == 4 && parameter > 99)               // If year > 99 ==> year = 0 
01FE:  MOVF   24,W
01FF:  SUBLW  04
0200:  BTFSS  03.2
0201:  GOTO   206
0202:  MOVF   2D,W
0203:  SUBLW  63
0204:  BTFSS  03.0
....................         parameter = 0; 
0205:  CLRF   2D
....................       lcd_gotoxy(x, y); 
0206:  MOVF   2B,W
0207:  MOVWF  32
0208:  MOVF   2C,W
0209:  MOVWF  33
020A:  CALL   0EB
....................       printf(lcd_putc,"%02u", parameter);        // Display parameter 
020B:  MOVF   2D,W
020C:  MOVWF  2E
020D:  MOVLW  01
020E:  MOVWF  2F
020F:  CALL   194
....................       delay_ms(200);                             // Wait 200ms 
0210:  MOVLW  C8
0211:  MOVWF  32
0212:  CALL   015
0213:  GOTO   1DA
....................     } 
....................     lcd_gotoxy(x, y); 
0214:  MOVF   2B,W
0215:  MOVWF  32
0216:  MOVF   2C,W
0217:  MOVWF  33
0218:  CALL   0EB
....................     lcd_putc("  ");                              // Display two spaces 
0219:  MOVLW  04
021A:  BSF    03.6
021B:  MOVWF  0D
021C:  MOVLW  00
021D:  MOVWF  0F
021E:  BCF    03.6
021F:  CALL   129
....................     blink(); 
0220:  CALL   1C9
....................     lcd_gotoxy(x, y); 
0221:  MOVF   2B,W
0222:  MOVWF  32
0223:  MOVF   2C,W
0224:  MOVWF  33
0225:  CALL   0EB
....................     printf(lcd_putc,"%02u", parameter);          // Display parameter 
0226:  MOVF   2D,W
0227:  MOVWF  2E
0228:  MOVLW  01
0229:  MOVWF  2F
022A:  CALL   194
....................     blink(); 
022B:  CALL   1C9
....................     if(!input(PIN_A2)){                          // If button RA2 is pressed 
022C:  BTFSC  05.2
022D:  GOTO   232
....................       i++;                                       // Increament 'i' for the next parameter 
022E:  INCF   24,F
....................       return parameter;                          // Return parameter value and exit 
022F:  MOVF   2D,W
0230:  MOVWF  21
0231:  GOTO   233
....................     } 
0232:  GOTO   1DA
....................   } 
0233:  RETURN
.................... } 
.................... void main(){ 
*
0345:  MOVF   03,W
0346:  ANDLW  1F
0347:  MOVWF  03
0348:  BSF    03.5
0349:  BSF    1F.0
034A:  BSF    1F.1
034B:  BSF    1F.2
....................   lcd_init();                                    // Initialize LCD module 
034C:  BCF    03.5
034D:  GOTO   0AF
....................   lcd_putc('\f');                                // LCD clear 
034E:  MOVLW  0C
034F:  MOVWF  31
0350:  CALL   0FD
....................   lcd_gotoxy(1, 1);  lcd_putc("TIME:   :  :"); 
0351:  MOVLW  01
0352:  MOVWF  32
0353:  MOVWF  33
0354:  CALL   0EB
0355:  MOVLW  06
0356:  BSF    03.6
0357:  MOVWF  0D
0358:  MOVLW  00
0359:  MOVWF  0F
035A:  BCF    03.6
035B:  CALL   129
....................   lcd_gotoxy(1, 2);  lcd_putc("DATE:   /  /20"); 
035C:  MOVLW  01
035D:  MOVWF  32
035E:  MOVLW  02
035F:  MOVWF  33
0360:  CALL   0EB
0361:  MOVLW  0D
0362:  BSF    03.6
0363:  MOVWF  0D
0364:  MOVLW  00
0365:  MOVWF  0F
0366:  BCF    03.6
0367:  CALL   129
....................   while(TRUE){ 
....................     if(!input(PIN_A2)){                          // If RB0 button is pressed 
0368:  BTFSC  05.2
0369:  GOTO   3E0
....................       i = 0; 
036A:  CLRF   24
....................       hour   = edit(7, 1, hour); 
036B:  MOVLW  07
036C:  MOVWF  2B
036D:  MOVLW  01
036E:  MOVWF  2C
036F:  MOVF   27,W
0370:  MOVWF  2D
0371:  CALL   1D8
0372:  MOVF   21,W
0373:  MOVWF  27
....................       minute = edit(10, 1, minute); 
0374:  MOVLW  0A
0375:  MOVWF  2B
0376:  MOVLW  01
0377:  MOVWF  2C
0378:  MOVF   26,W
0379:  MOVWF  2D
037A:  CALL   1D8
037B:  MOVF   21,W
037C:  MOVWF  26
....................       date   = edit(7, 2, date); 
037D:  MOVLW  07
037E:  MOVWF  2B
037F:  MOVLW  02
0380:  MOVWF  2C
0381:  MOVF   28,W
0382:  MOVWF  2D
0383:  CALL   1D8
0384:  MOVF   21,W
0385:  MOVWF  28
....................       month  = edit(10, 2, month); 
0386:  MOVLW  0A
0387:  MOVWF  2B
0388:  MOVLW  02
0389:  MOVWF  2C
038A:  MOVF   29,W
038B:  MOVWF  2D
038C:  CALL   1D8
038D:  MOVF   21,W
038E:  MOVWF  29
....................       year   = edit(15, 2, year); 
038F:  MOVLW  0F
0390:  MOVWF  2B
0391:  MOVLW  02
0392:  MOVWF  2C
0393:  MOVF   2A,W
0394:  MOVWF  2D
0395:  CALL   1D8
0396:  MOVF   21,W
0397:  MOVWF  2A
....................       // Convert decimal to BCD 
....................       minute = decimal_to_bcd(minute); 
0398:  MOVF   26,W
0399:  MOVWF  2B
039A:  CALL   234
039B:  MOVF   21,W
039C:  MOVWF  26
....................       hour   = decimal_to_bcd(hour); 
039D:  MOVF   27,W
039E:  MOVWF  2B
039F:  CALL   234
03A0:  MOVF   21,W
03A1:  MOVWF  27
....................       date   = decimal_to_bcd(date); 
03A2:  MOVF   28,W
03A3:  MOVWF  2B
03A4:  CALL   234
03A5:  MOVF   21,W
03A6:  MOVWF  28
....................       month  = decimal_to_bcd(month); 
03A7:  MOVF   29,W
03A8:  MOVWF  2B
03A9:  CALL   234
03AA:  MOVF   21,W
03AB:  MOVWF  29
....................       year   = decimal_to_bcd(year); 
03AC:  MOVF   2A,W
03AD:  MOVWF  2B
03AE:  CALL   234
03AF:  MOVF   21,W
03B0:  MOVWF  2A
....................       // End conversion 
....................       // Write data to DS3231 RTC 
....................       i2c_start();                               // Start I2C protocol 
03B1:  BSF    03.5
03B2:  BSF    05.0
03B3:  GOTO   3B4
03B4:  GOTO   3B5
03B5:  NOP
03B6:  BSF    05.1
03B7:  GOTO   3B8
03B8:  BCF    03.5
03B9:  BCF    05.0
03BA:  BSF    03.5
03BB:  BCF    05.0
03BC:  GOTO   3BD
03BD:  GOTO   3BE
03BE:  NOP
03BF:  BCF    03.5
03C0:  BCF    05.1
03C1:  BSF    03.5
03C2:  BCF    05.1
....................       i2c_write(0xD0);                           // DS3231 address 
03C3:  MOVLW  D0
03C4:  BCF    03.5
03C5:  MOVWF  2B
03C6:  CALL   246
....................       i2c_write(0);                              // Send register address 
03C7:  CLRF   2B
03C8:  CALL   246
....................       i2c_write(0);                              // Reset sesonds and start oscillator 
03C9:  CLRF   2B
03CA:  CALL   246
....................       i2c_write(minute);                         // Write minute value to DS3231 
03CB:  MOVF   26,W
03CC:  MOVWF  2B
03CD:  CALL   246
....................       i2c_write(hour);                           // Write hour value to DS3231 
03CE:  MOVF   27,W
03CF:  MOVWF  2B
03D0:  CALL   246
....................       i2c_write(1);                              // Write day value (not used) 
03D1:  MOVLW  01
03D2:  MOVWF  2B
03D3:  CALL   246
....................       i2c_write(date);                           // Write date value to DS3231 
03D4:  MOVF   28,W
03D5:  MOVWF  2B
03D6:  CALL   246
....................       i2c_write(month);                          // Write month value to DS3231 
03D7:  MOVF   29,W
03D8:  MOVWF  2B
03D9:  CALL   246
....................       i2c_write(year);                           // Write year value to DS3231 
03DA:  MOVF   2A,W
03DB:  MOVWF  2B
03DC:  CALL   246
....................       delay_ms(200);                             // Wait 200ms 
03DD:  MOVLW  C8
03DE:  MOVWF  32
03DF:  CALL   015
....................     } 
....................     i2c_start();                                  // Start I2C protocol 
03E0:  BSF    03.5
03E1:  BSF    05.0
03E2:  GOTO   3E3
03E3:  GOTO   3E4
03E4:  NOP
03E5:  BSF    05.1
03E6:  GOTO   3E7
03E7:  BCF    03.5
03E8:  BTFSS  05.1
03E9:  GOTO   3E8
03EA:  BCF    05.0
03EB:  BSF    03.5
03EC:  BCF    05.0
03ED:  GOTO   3EE
03EE:  GOTO   3EF
03EF:  NOP
03F0:  BCF    03.5
03F1:  BCF    05.1
03F2:  BSF    03.5
03F3:  BCF    05.1
....................     i2c_write(0xD0);                              // DS3231 address 
03F4:  MOVLW  D0
03F5:  BCF    03.5
03F6:  MOVWF  2B
03F7:  CALL   246
....................     i2c_write(0);                                 // Send register address 
03F8:  CLRF   2B
03F9:  CALL   246
....................     i2c_start();                                  // Restart I2C 
03FA:  BSF    03.5
03FB:  BSF    05.0
03FC:  GOTO   3FD
03FD:  GOTO   3FE
03FE:  NOP
03FF:  BSF    05.1
0400:  GOTO   401
0401:  BCF    03.5
0402:  BTFSS  05.1
0403:  GOTO   402
0404:  BCF    05.0
0405:  BSF    03.5
0406:  BCF    05.0
0407:  GOTO   408
0408:  GOTO   409
0409:  NOP
040A:  BCF    03.5
040B:  BCF    05.1
040C:  BSF    03.5
040D:  BCF    05.1
....................     i2c_write(0xD1);                              // Initialize data read 
040E:  MOVLW  D1
040F:  BCF    03.5
0410:  MOVWF  2B
0411:  CALL   246
....................     second = i2c_read(1);                         // Read seconds from register 0 
0412:  MOVLW  01
0413:  MOVWF  20
0414:  CALL   27E
0415:  MOVF   21,W
0416:  MOVWF  25
....................     minute = i2c_read(1);                         // Read minuts from register 1 
0417:  MOVLW  01
0418:  MOVWF  20
0419:  CALL   27E
041A:  MOVF   21,W
041B:  MOVWF  26
....................     hour   = i2c_read(1);                         // Read hour from register 2 
041C:  MOVLW  01
041D:  MOVWF  20
041E:  CALL   27E
041F:  MOVF   21,W
0420:  MOVWF  27
....................     i2c_read(1);                                  // Read day from register 3 (not used) 
0421:  MOVLW  01
0422:  MOVWF  20
0423:  CALL   27E
....................     date   = i2c_read(1);                         // Read date from register 4 
0424:  MOVLW  01
0425:  MOVWF  20
0426:  CALL   27E
0427:  MOVF   21,W
0428:  MOVWF  28
....................     month  = i2c_read(1);                         // Read month from register 5 
0429:  MOVLW  01
042A:  MOVWF  20
042B:  CALL   27E
042C:  MOVF   21,W
042D:  MOVWF  29
....................     year   = i2c_read(0);                         // Read year from register 6 
042E:  CLRF   20
042F:  CALL   27E
0430:  MOVF   21,W
0431:  MOVWF  2A
....................     i2c_stop();                                   // Stop I2C protocol 
0432:  BSF    03.5
0433:  BCF    05.0
0434:  NOP
0435:  BSF    05.1
0436:  BCF    03.5
0437:  BTFSS  05.1
0438:  GOTO   437
0439:  GOTO   43A
043A:  GOTO   43B
043B:  NOP
043C:  GOTO   43D
043D:  NOP
043E:  BSF    03.5
043F:  BSF    05.0
0440:  GOTO   441
0441:  GOTO   442
0442:  NOP
....................     DS3231_display();                             // Diaplay time & calendar 
0443:  BCF    03.5
0444:  GOTO   2EA
....................     delay_ms(50); 
0445:  MOVLW  32
0446:  MOVWF  32
0447:  CALL   015
0448:  GOTO   368
....................   } 
.................... } 
0449:  SLEEP

Configuration Fuses:
   Word  1: 3FF2   HS NOWDT PUT NOPROTECT BROWNOUT
